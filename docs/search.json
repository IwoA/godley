[{"path":"https://gamrot.github.io/godley/articles/01_Model_SIM.html","id":"base-scenario","dir":"Articles","previous_headings":"","what":"Base scenario","title":"Model SIM","text":"First need create empty SFC model: Next add variables: also add equations: Now can simulate model (example next 100 periods using Newton method): Based calculated simulation can display results desired set variables:","code":"# Create empty model model_sim <- create_model(name = \"SFC SIM\") #> Empty model created # Add variables model_sim <- add_variable(model_sim, \"C_d\", desc = \"Consumption demand by households\") model_sim <- add_variable(model_sim, \"C_s\", desc = \"Consumption supply\") model_sim <- add_variable(model_sim, \"G_s\", desc = \"Government supply\") model_sim <- add_variable(model_sim, \"H_h\", desc = \"Cash money held by households\") model_sim <- add_variable(model_sim, \"H_s\", desc = \"Cash money supplied by the government\") model_sim <- add_variable(model_sim, \"N_d\", desc = \"Demand for labor\") model_sim <- add_variable(model_sim, \"N_s\", desc = \"Supply of labor\") model_sim <- add_variable(model_sim, \"T_d\", desc = \"Taxes, demand\") model_sim <- add_variable(model_sim, \"T_s\", desc = \"Taxes, supply\") model_sim <- add_variable(model_sim, \"Y\", desc = \"Income = GDP\") model_sim <- add_variable(model_sim, \"Yd\", desc = \"Disposable income of households\") model_sim <- add_variable(model_sim, \"alpha1\", init = 0.6, desc = \"Propensity to consume out of income\") model_sim <- add_variable(model_sim, \"alpha2\", init = 0.4, desc = \"Propensity to consume out of wealth\") model_sim <- add_variable(model_sim, \"theta\", init = 0.2, desc = \"Tax rate\") model_sim <- add_variable(model_sim, \"G_d\", init = 20, desc = \"Government demand\") model_sim <- add_variable(model_sim, \"W\", init = 1, desc = \"Wage rate\") # Add equations model_sim <- add_equation(model_sim, \"C_s = C_d\", desc = \"Consumption\") model_sim <- add_equation(model_sim, \"G_s = G_d\") model_sim <- add_equation(model_sim, \"T_s = T_d\") model_sim <- add_equation(model_sim, \"N_s = N_d\") model_sim <- add_equation(model_sim, \"Yd = W * N_s - T_s\") model_sim <- add_equation(model_sim, \"T_d = theta * W * N_s\") model_sim <- add_equation(model_sim, \"C_d = alpha1 * Yd + alpha2 * H_h[-1]\") model_sim <- add_equation(model_sim, \"H_s = G_d - T_d + H_s[-1]\") model_sim <- add_equation(model_sim, \"H_h = Yd - C_d + H_h[-1]\") model_sim <- add_equation(model_sim, \"Y = C_s + G_s\") model_sim <- add_equation(model_sim, \"N_d = Y/W\") model_sim <- add_equation(model_sim, \"H_s = H_h\", desc = \"Money equilibrium\", hidden = TRUE) # Simulate model model_sim <- simulate_scenario(model_sim, scenario = \"baseline\", max_iter = 350, periods = 100,                                 hidden_tol = 0.1, tol = 1e-08, method = \"Newton\") #> Model prepared successfully #> Simulating scenario baseline (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(model = model_sim, scenario = c(\"baseline\"), from = 1, to = 50,                  expressions = c(\"Y\", \"C_d\", \"G_s\"))"},{"path":"https://gamrot.github.io/godley/articles/01_Model_SIM.html","id":"shock-scenario","dir":"Articles","previous_headings":"","what":"Shock scenario","title":"Model SIM","text":"godley package can simulate shock affect base scenario. example implement permanent increase government expenditures. First need create empty shock object: Next need add appropriate equation: Later need create shock scenario: Now can simulate new shock scenario: can also compare results shock base scenarios:","code":"# Create empty shock shock_sim <- create_shock() #> Shock object created # Add shock equation with increased government expenditures shock_sim <- add_shock(shock_sim, equation = \"G_d = 25\",                         desc = \"Increase in government expenditures\", start = 5, end = 50) # Create new scenario with this shock model_sim <- add_scenario(model_sim, name = \"expansion\", origin = \"baseline\",                            origin_period = 1, shock = shock_sim) # Simulate shock model_sim <- simulate_scenario(model_sim, scenario = \"expansion\", max_iter = 350, periods = 100,                                 hidden_tol = 0.1, tol = 1e-08, method = \"Newton\") #> Simulating scenario expansion (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(model = model_sim, scenario = c(\"baseline\", \"expansion\"), from = 1, to = 50,                  expressions = c(\"Y\")) plot_simulation(model = model_sim, scenario = c(\"baseline\", \"expansion\"), from = 1, to = 50,                  expressions = c(\"C_d\")) plot_simulation(model = model_sim, scenario = c(\"baseline\", \"expansion\"), from = 1, to = 50,                  expressions = c(\"G_s\"))"},{"path":"https://gamrot.github.io/godley/articles/01_Model_SIM.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Model SIM","text":"information model SIM can found Chapter 3 Monetary Economics. Integrated Approach Credit, Money, Income, Production Wealth.","code":""},{"path":"https://gamrot.github.io/godley/articles/02_Model_SIMEX.html","id":"base-scenario","dir":"Articles","previous_headings":"","what":"Base scenario","title":"Model SIMEX","text":"First need create empty SFC model: Next add variables: also add equations: Now can simulate model (example next 100 periods using Newton method): Based calculated simulation can display results desired set variables:","code":"# Create empty model model_simex <- create_model(name = \"SFC SIMEX\") #> Empty model created # Add variables model_simex <- add_variable(model_simex, \"C_d\", desc = \"Consumption demand by households\") model_simex <- add_variable(model_simex, \"C_s\", desc = \"Consumption supply\") model_simex <- add_variable(model_simex, \"G_s\", desc = \"Government supply\") model_simex <- add_variable(model_simex, \"T_d\", desc = \"Taxes, demand\") model_simex <- add_variable(model_simex, \"T_s\", desc = \"Taxes, supply\") model_simex <- add_variable(model_simex, \"N_d\", desc = \"Demand for labor\") model_simex <- add_variable(model_simex, \"N_s\", desc = \"Supply of labor\") model_simex <- add_variable(model_simex, \"H_h\", desc = \"Cash money held by households\") model_simex <- add_variable(model_simex, \"H_s\", desc = \"Cash money supplied by the government\") model_simex <- add_variable(model_simex, \"H_d\", desc = \"Cash money demanded by the government\") model_simex <- add_variable(model_simex, \"Y\", desc = \"Income = GDP\") model_simex <- add_variable(model_simex, \"Yd\", desc = \"Disposable income of households\") model_simex <- add_variable(model_simex, \"Yd_e\", desc = \"Expected disposable income of households\") model_simex <- add_variable(model_simex, \"alpha1\", init = 0.6,                              desc = \"Propensity to consume out of income\") model_simex <- add_variable(model_simex, \"alpha2\", init = 0.4,                              desc = \"Propensity to consume out of wealth\") model_simex <- add_variable(model_simex, \"theta\", init = 0.2, desc = \"Tax rate\") model_simex <- add_variable(model_simex, \"G_d\", init = 20, desc = \"Government demand\") model_simex <- add_variable(model_simex, \"W\", init = 1, desc = \"Wage rate\") # Add equations model_simex <- add_equation(model_simex, \"C_s = C_d\", desc = \"Consumption\") model_simex <- add_equation(model_simex, \"G_s = G_d\") model_simex <- add_equation(model_simex, \"T_s = T_d\") model_simex <- add_equation(model_simex, \"N_s = N_d\") model_simex <- add_equation(model_simex, \"Yd = W * N_s - T_s\") model_simex <- add_equation(model_simex, \"T_d = theta * W * N_s\") model_simex <- add_equation(model_simex, \"C_d = alpha1 * Yd_e + alpha2 * H_h[-1]\") model_simex <- add_equation(model_simex, \"H_s = G_d - T_d + H_s[-1]\") model_simex <- add_equation(model_simex, \"H_h = Yd - C_d + H_h[-1]\") model_simex <- add_equation(model_simex, \"Y = C_s + G_s\") model_simex <- add_equation(model_simex, \"N_d = Y/W\") model_simex <- add_equation(model_simex, \"H_d = Yd_e - C_d + H_h[-1]\") model_simex <- add_equation(model_simex, \"Yd[-1] = Yd_e\") model_simex <- add_equation(model_simex, \"H_s = H_h\", desc = \"Money equilibrium\", hidden = TRUE) # Simulate model model_simex <- simulate_scenario(model_simex, scenario = \"baseline\", max_iter = 350, periods = 100,                                   hidden_tol = 0.1, tol = 1e-08, method = \"Newton\") #> Exogenous variable(s): Yd_e take(s) default 0 value #> Variable(s): Yd[-1] take(s) default 0 value #> Model prepared successfully #> Simulating scenario baseline (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(model = model_simex, scenario = c(\"baseline\"), from = 1, to = 50,                  expressions = c(\"Y\", \"C_d\", \"C_s / alpha1\"))"},{"path":"https://gamrot.github.io/godley/articles/02_Model_SIMEX.html","id":"shock-scenario","dir":"Articles","previous_headings":"","what":"Shock scenario","title":"Model SIMEX","text":"can simulate shock affect base scenario. example implement increased government expenditures. First need create empty shock: Next need add appropriate equation: need create new shock scenario: Now can simulate new shock scenario: can also display results shock scenario:","code":"# Create empty shock shock_simex <- create_shock() #> Shock object created # Add shock equation with increased government expenditures shock_simex <- add_shock(shock_simex, equation = \"G_d = 25\",                           desc = \"Increase in government expenditures\", start = 5, end = 50) # Create new scenario with this shock model_simex <- add_scenario(model_simex, name = \"expansion\", origin = \"baseline\",                              origin_period = 100, shock = shock_simex) # Simulate shock model_simex <- simulate_scenario(model_simex, scenario = \"expansion\", max_iter = 350, periods = 100,                                   hidden_tol = 0.1, tol = 1e-08, method = \"Newton\") #> Simulating scenario expansion (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(model = model_simex, scenario = c(\"expansion\"), from = 1, to = 50,                  expressions = c(\"Y\", \"C_d\", \"C_s / alpha1\"))"},{"path":"https://gamrot.github.io/godley/articles/02_Model_SIMEX.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Model SIMEX","text":"information model SIMEX can found Chapter 3 Monetary Economics. Integrated Approach Credit, Money, Income, Production Wealth.","code":""},{"path":"https://gamrot.github.io/godley/articles/03_Model_PC.html","id":"base-scenario","dir":"Articles","previous_headings":"","what":"Base scenario","title":"Model PC","text":"First need create empty SFC model: Next add variables: also add equations: Now can simulate model (example next 100 periods using Newton method): Based calculated simulation can display results desired set variables:","code":"# Create empty model model_pc <- create_model(name = \"SFC PC\") #> Empty model created # Add variables model_pc <- add_variable(model_pc, \"B_cb\", desc = \"\")  model_pc <- add_variable(model_pc, \"H_s\", desc = \"\")  model_pc <- add_variable(model_pc, \"B_s\", desc = \"\")  model_pc <- add_variable(model_pc, \"B_h\", desc = \"\")  model_pc <- add_variable(model_pc, \"H_h1\", desc = \"\")  model_pc <- add_variable(model_pc, \"H_h\", desc = \"\")  model_pc <- add_variable(model_pc, \"C\", desc = \"\")  model_pc <- add_variable(model_pc, \"V\", desc = \"\")  model_pc <- add_variable(model_pc, \"T_x\", desc = \"\")  model_pc <- add_variable(model_pc, \"Y\", desc = \"Income = GDP\")  model_pc <- add_variable(model_pc, \"Yd\", desc = \"Disposable income of households\")  model_pc <- add_variable(model_pc, \"alpha1\", init = 0.6, desc = \"Propensity to consume out of income\")  model_pc <- add_variable(model_pc, \"alpha2\", init = 0.4, desc = \"Propensity to consume out of wealth\")  model_pc <- add_variable(model_pc, \"theta\", init = 0.2, desc = \"Tax rate\")  model_pc <- add_variable(model_pc, \"r\", init = 0.025, desc = \"\")  model_pc <- add_variable(model_pc, \"G\", init = 20, desc = \"Government demand\")  model_pc <- add_variable(model_pc, \"lambda0\", init = 0.635, desc = \"\")  model_pc <- add_variable(model_pc, \"lambda1\", init = 0.05, desc = \"\")  model_pc <- add_variable(model_pc, \"lambda2\", init = 0.01, desc = \"\") # Add equations model_pc <- add_equation(model_pc, \"Y = C + G\", desc = \"\")  model_pc <- add_equation(model_pc, \"Yd = Y - T_x + r[-1] * B_h[-1]\")  model_pc <- add_equation(model_pc, \"T_x = theta * (Y + r[-1] * B_h[-1])\")  model_pc <- add_equation(model_pc, \"V = V[-1] + (Yd - C)\")  model_pc <- add_equation(model_pc, \"C = alpha1 * Yd + alpha2 * V[-1]\")  model_pc <- add_equation(model_pc, \"H_h = V - B_h\")  model_pc <- add_equation(model_pc, \"H_h1 = V * ((1 - lambda0) - lambda1 * r + lambda2 * ( Yd/V ))\")  model_pc <- add_equation(model_pc, \"B_h = V * (lambda0 + lambda1 * r - lambda2 * ( Yd/V ))\")  model_pc <- add_equation(model_pc, \"B_s = B_s[-1] + (G + r[-1] * B_s[-1]) - (T_x + r[-1] * B_cb[-1])\")  model_pc <- add_equation(model_pc, \"H_s = H_s[-1] + B_cb - B_cb[-1]\")  model_pc <- add_equation(model_pc, \"B_cb = B_s - B_h\")  model_pc <- add_equation(model_pc, \"H_h = H_s\", hidden = T) # Simulate model model_pc <- simulate_scenario(model_pc, scenario = \"baseline\", max_iter = 350, periods = 100,                                hidden_tol = 0.1, tol = 1e-08, method = \"Newton\") #> Model prepared successfully #> Simulating scenario baseline (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(model = model_pc, scenario = c(\"baseline\"), from = 1, to = 100,                  expressions = c(\"B_h / V\")) # Plot results plot_simulation(model = model_pc, scenario = c(\"baseline\"), from = 1, to = 100,                  expressions = c(\"H_h / V\"))"},{"path":"https://gamrot.github.io/godley/articles/03_Model_PC.html","id":"shock-scenario","dir":"Articles","previous_headings":"","what":"Shock scenario","title":"Model PC","text":"can simulate shock affect base scenario. example implement increased rate interest bills. First need create empty shock: Next need add appropriate equation: need create new shock scenario: Now can simulate new shock scenario: can also display results shock scenario:","code":"# Create empty shock shock_pc <- create_shock() #> Shock object created # Add shock equation with increased rate of interest on bills shock_pc <- add_shock(shock_pc, equation = \"r = 0.035\",                        desc = \"Increase in the rate of interest on bills\", start = 5, end = 50) # Create new scenario with this shock model_pc <- add_scenario(model_pc, name = \"expansion\", origin = \"baseline\",                           origin_period = 100, shock = shock_pc) # Simulate shock model_pc <- simulate_scenario(model_pc, scenario = \"expansion\", max_iter = 350, periods = 100,                                hidden_tol = 0.1, tol = 1e-08, method = \"Newton\") #> Simulating scenario expansion (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(model = model_pc, scenario = c(\"expansion\"), from = 1, to = 50,                  expressions = c(\"B_h / V\")) # Plot results plot_simulation(model = model_pc, scenario = c(\"expansion\"), from = 1, to = 50,                  expressions = c(\"H_h / V\"))"},{"path":"https://gamrot.github.io/godley/articles/03_Model_PC.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Model PC","text":"information model PC can found Chapter 4 Monetary Economics. Integrated Approach Credit, Money, Income, Production Wealth.","code":""},{"path":"https://gamrot.github.io/godley/articles/04_Model_LP.html","id":"base-scenario","dir":"Articles","previous_headings":"","what":"Base scenario","title":"Model LP","text":"First need create empty SFC model: Next add variables: also add equations: Now can simulate model (example next 100 periods using Gauss method): Based calculated simulation can display simulation results desired set variables:","code":"# Create empty model model_lp <- create_model(name = \"SFC LP\") #> Empty model created # Add variables model_lp <- add_variable(model_lp, \"Y\", desc = \"\")  model_lp <- add_variable(model_lp, \"YDr\")  model_lp <- add_variable(model_lp, \"TX\")  model_lp <- add_variable(model_lp, \"V\", init = 0.0000001)  model_lp <- add_variable(model_lp, \"CG\")  model_lp <- add_variable(model_lp, \"C\")  model_lp <- add_variable(model_lp, \"VE\", init = 0.0000001)  model_lp <- add_variable(model_lp, \"Hh\")  model_lp <- add_variable(model_lp, \"Hd\")  model_lp <- add_variable(model_lp, \"Bd\")  model_lp <- add_variable(model_lp, \"BLd\")  model_lp <- add_variable(model_lp, \"BLh\", desc = \"\")  model_lp <- add_variable(model_lp, \"Bs\", desc = \"\")  model_lp <- add_variable(model_lp, \"Hs\", desc = \"\")  model_lp <- add_variable(model_lp, \"Bcb\", desc = \"\")  model_lp <- add_variable(model_lp, \"BLs\", desc = \"\")  model_lp <- add_variable(model_lp, \"ERrbl\", desc = \"\")  model_lp <- add_variable(model_lp, \"rbl\", desc = \"\", )  model_lp <- add_variable(model_lp, \"CGE\", desc = \"\")  model_lp <- add_variable(model_lp, \"YDEr\", desc = \"\")  model_lp <- add_variable(model_lp, \"pebl\", desc = \"\")  model_lp <- add_variable(model_lp, \"Bh\", desc = \"\")  model_lp <- add_variable(model_lp, \"alpha1\", init = 0.8, desc = \"Propensity to consume out of income\")  model_lp <- add_variable(model_lp, \"alpha2\", init = 0.2, desc = \"Propensity to consume out of wealth\")  model_lp <- add_variable(model_lp, \"theta\", init = 0.1938, desc = \"Tax rate\")  model_lp <- add_variable(model_lp, \"rb\", init = 0.03, desc = \"\")  model_lp <- add_variable(model_lp, \"G\", init = 20, desc = \"Government demand\")  model_lp <- add_variable(model_lp, \"pbl\", init = 20, desc = \"\")  model_lp <- add_variable(model_lp, \"lambda20\", init = 0.44196, desc = \"\")  model_lp <- add_variable(model_lp, \"lambda22\", init = 1.1, desc = \"\")  model_lp <- add_variable(model_lp, \"lambda23\", init = -1, desc = \"\")  model_lp <- add_variable(model_lp, \"lambda24\", init = -0.03, desc = \"\")  model_lp <- add_variable(model_lp, \"lambda30\", init = .3997, desc = \"\")  model_lp <- add_variable(model_lp, \"lambda32\", init = -1, desc = \"\")  model_lp <- add_variable(model_lp, \"lambda33\", init = 1.1, desc = \"\")  model_lp <- add_variable(model_lp, \"lambda34\", init = -0.03, desc = \"\")  model_lp <- add_variable(model_lp, \"chi\", init = 0.1, desc = \"\") # Add equations model_lp <- add_equation(model_lp, \"Y=C + G\", desc = \"\")  model_lp <- add_equation(model_lp, \"YDr= Y - TX + rb[-1] * Bh[-1] + BLh[-1]\")  model_lp <- add_equation(model_lp, \"TX =theta * (Y + rb[-1] * Bh[-1] + BLh[-1])\")  model_lp <- add_equation(model_lp, \"V = V[-1] + (YDr - C) + CG\")  model_lp <- add_equation(model_lp, \"CG = (pbl - pbl[-1]) * BLh[-1]\")  model_lp <- add_equation(model_lp, \"C = alpha1 * YDEr + alpha2 * V[-1]\")  model_lp <- add_equation(model_lp, \"VE = V[-1] + (YDEr - C) + CG\")  model_lp <- add_equation(model_lp, \"Hh = V - Bh - pbl * BLh\")  model_lp <- add_equation(model_lp, \"Hd = VE - Bd - pbl * BLd\")  model_lp <- add_equation(model_lp, \"Bd = (VE * lambda20) + VE * (lambda22 * rb + lambda23 * ERrbl)                           + lambda24 * (YDEr)\")  model_lp <- add_equation(model_lp, \"BLd = VE * (lambda30 + lambda32 * rb + lambda33 * ERrbl                           + lambda34 * (YDEr/VE))/pbl\")  model_lp <- add_equation(model_lp, \"BLh = BLd\", desc = \"\", hidden = F)  model_lp <- add_equation(model_lp, \"Bs = Bs[-1] + (G + rb[-1] * Bs[-1] + BLs[-1])                           - (TX + rb[-1] * Bcb[-1]) - ((BLs - BLs[-1]) * pbl)\", desc = \"\", hidden = F)  model_lp <- add_equation(model_lp, \"Hs = Hs[-1] + (Bcb - Bcb[-1])\", desc = \"\", hidden = F)  model_lp <- add_equation(model_lp, \"Bcb = Bs - Bh\", desc = \"\", hidden = F)  model_lp <- add_equation(model_lp, \"BLs = BLh\", desc = \"\", hidden = F)  model_lp <- add_equation(model_lp, \"ERrbl = rbl + chi * ((pebl - pbl)/pbl)\", desc = \"\", hidden = F)  model_lp <- add_equation(model_lp, \"rbl = 1/pbl\", desc = \"\", hidden = F)  model_lp <- add_equation(model_lp, \"CGE = chi * (pebl - pbl) * BLh\", desc = \"\", hidden = F)  model_lp <- add_equation(model_lp, \"YDEr = YDr[-1]\", desc = \"\", hidden = F)  model_lp <- add_equation(model_lp, \"Bh = Bd\", desc = \"\")  model_lp <- add_equation(model_lp, \"pebl = pbl\", desc = \"\")  model_lp <- add_equation(model_lp, \"Hs = Hh\", desc = \"Money equilibrium\", hidden = TRUE) # Simulate model model_lp <- simulate_scenario(model_lp, scenario = \"baseline\", max_iter = 350, periods = 100,                                hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\") #> Model prepared successfully #> Simulating scenario baseline (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(model = model_lp, scenario = c(\"baseline\"), from = 1, to = 100,                  expressions = c(\"Y\",\"V\"))"},{"path":"https://gamrot.github.io/godley/articles/04_Model_LP.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Model LP","text":"information model LP can found Chapter 5 Monetary Economics. Integrated Approach Credit, Money, Income, Production Wealth.","code":""},{"path":"https://gamrot.github.io/godley/articles/05_Model_REG.html","id":"base-scenario","dir":"Articles","previous_headings":"","what":"Base scenario","title":"Model REG","text":"First need create empty SFC model: Next add variables: also add equations: Now can simulate model (example next 100 periods using Gauss method): Based calculated simulation can display simulation results desired set variables:","code":"# Create empty model model_reg <- create_model(name = \"SFC REG\") #> Empty model created # Add variables model_reg <- add_variable(model_reg,\"r\", init = 0.025)  model_reg <- add_variable(model_reg,\"G_S\", init = 20)  model_reg <- add_variable(model_reg,\"G_N\", init = 20)  model_reg <- add_variable(model_reg,\"mu_N\", init = 0.15)  model_reg <- add_variable(model_reg,\"mu_S\", init = 0.15)  model_reg <- add_variable(model_reg,\"alpha1_N\", init = 0.7)  model_reg <- add_variable(model_reg,\"alpha1_S\", init = 0.7)  model_reg <- add_variable(model_reg,\"alpha2_N\", init = 0.3)  model_reg <- add_variable(model_reg,\"alpha2_S\", init = 0.3)  model_reg <- add_variable(model_reg,\"lambda0_N\", init = 0.67)  model_reg <- add_variable(model_reg,\"lambda0_S\", init = 0.67)  model_reg <- add_variable(model_reg,\"lambda1_N\", init = 0.05)  model_reg <- add_variable(model_reg,\"lambda1_S\", init = 0.05)  model_reg <- add_variable(model_reg,\"lambda2_N\", init = 0.01)  model_reg <- add_variable(model_reg,\"lambda2_S\", init = 0.01)  model_reg <- add_variable(model_reg,\"theta\", init = 0.2)  model_reg <- add_variable(model_reg,\"Y_N\")  model_reg <- add_variable(model_reg,\"C_N\")  model_reg <- add_variable(model_reg,\"X_N\")  model_reg <- add_variable(model_reg,\"IM_N\")  model_reg <- add_variable(model_reg,\"Y_S\")  model_reg <- add_variable(model_reg,\"C_S\")  model_reg <- add_variable(model_reg,\"X_S\")  model_reg <- add_variable(model_reg,\"IM_S\")  model_reg <- add_variable(model_reg,\"YD_N\")  model_reg <- add_variable(model_reg,\"TX_N\")  model_reg <- add_variable(model_reg,\"Bh_N\")  model_reg <- add_variable(model_reg,\"YD_S\")  model_reg <- add_variable(model_reg,\"TX_S\")  model_reg <- add_variable(model_reg,\"Bh_S\")  model_reg <- add_variable(model_reg,\"V_N\")  model_reg <- add_variable(model_reg,\"V_S\")  model_reg <- add_variable(model_reg,\"Hh_N\")  model_reg <- add_variable(model_reg,\"Hh_S\")  model_reg <- add_variable(model_reg,\"TX\")  model_reg <- add_variable(model_reg,\"G\")  model_reg <- add_variable(model_reg,\"Bh\")  model_reg <- add_variable(model_reg,\"Bs\")  model_reg <- add_variable(model_reg,\"Hh\")  model_reg <- add_variable(model_reg,\"Hs\")  model_reg <- add_variable(model_reg,\"Bcb\") # Add equations model_reg <- add_equation(model_reg,\"Y_N = C_N + G_N + X_N - IM_N\")  model_reg <- add_equation(model_reg,\"Y_S = C_S + G_S + X_S - IM_S\")  model_reg <- add_equation(model_reg,\"IM_N = mu_N * Y_N\")  model_reg <- add_equation(model_reg,\"IM_S = mu_S * Y_S\")  model_reg <- add_equation(model_reg,\"X_N = IM_S\")  model_reg <- add_equation(model_reg,\"YD_N = Y_N - TX_N + r[-1] * Bh_N[-1]\")  model_reg <- add_equation(model_reg,\"YD_S = Y_S - TX_S + r[-1] * Bh_S[-1]\")  model_reg <- add_equation(model_reg,\"TX_N = theta * ( Y_N + r[-1] * Bh_N[-1])\")  model_reg <- add_equation(model_reg,\"X_S = IM_N\")  model_reg <- add_equation(model_reg,\"TX_S = theta * ( Y_S + r[-1] * Bh_S[-1])\")  model_reg <- add_equation(model_reg,\"V_N = V_N[-1] + ( YD_N - C_N )\")  model_reg <- add_equation(model_reg,\"V_S = V_S[-1] + ( YD_S - C_S )\")  model_reg <- add_equation(model_reg,\"C_N = alpha1_N * YD_N + alpha2_N * V_N[-1]\")  model_reg <- add_equation(model_reg,\"C_S = alpha1_S * YD_S + alpha2_S * V_S[-1]\")  model_reg <- add_equation(model_reg,\"Hh_N = V_N - Bh_N\")  model_reg <- add_equation(model_reg,\"Hh_S = V_S - Bh_S\")  model_reg <- add_equation(model_reg,\"Bh_N = V_N * ( lambda0_N + lambda1_N * r                            - lambda2_N * ( YD_N/V_N ) )\")  model_reg <- add_equation(model_reg,\"Bh_S = V_S * ( lambda0_S + lambda1_S * r                            - lambda2_S * ( YD_S/V_S ) )\")  model_reg <- add_equation(model_reg,\"TX = TX_N + TX_S\")  model_reg <- add_equation(model_reg,\"G = G_N + G_S\")  model_reg <- add_equation(model_reg,\"Bh = Bh_N + Bh_S\")  model_reg <- add_equation(model_reg,\"Hh = Hh_N + Hh_S\")  model_reg <- add_equation(model_reg,\"Bs = Bs[-1] + ( G + r[-1] * Bs[-1] ) - ( TX + r[-1] * Bcb[-1] )\")  model_reg <- add_equation(model_reg,\"Hs = Hs[-1] + Bcb - Bcb[-1]\")  model_reg <- add_equation(model_reg,\"Bcb = Bs - Bh\")  model_reg <- add_equation(model_reg,\"Hs = Hh\", desc = \"Money equilibrium\", hidden = TRUE) # Simulate model model_reg <- simulate_scenario(model_reg, scenario = \"baseline\", max_iter = 350, periods = 100,                                 hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\") #> Model prepared successfully #> Simulating scenario baseline (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(model = model_reg, scenario = \"baseline\", from = 1, to = 60,                  expressions = c(\"deltaV_S = V_S - dplyr::lag(V_S)\",                                  \"GB_S = TX_S - (G_S + dplyr::lag(r) * dplyr::lag(Bh_S))\",                                  \"TB_S = X_S - IM_S\"))"},{"path":"https://gamrot.github.io/godley/articles/05_Model_REG.html","id":"shock-scenarios","dir":"Articles","previous_headings":"","what":"Shock scenarios","title":"Model REG","text":"godley package can simulate shock affect base scenario.","code":""},{"path":"https://gamrot.github.io/godley/articles/05_Model_REG.html","id":"shock-1","dir":"Articles","previous_headings":"Shock scenarios","what":"Shock 1","title":"Model REG","text":"example implement increase propensity import South. First need create empty shock: Next need add appropriate equation: need create new shock scenario: Now can simulate new shock scenario: can also display results shock scenario:","code":"# Create empty shock shock_reg <- create_shock() #> Shock object created # Add shock equation with increased propensity to import of the South shock_reg <- add_shock(shock_reg, equation = \"mu_S = 0.25\",                         desc = \"An increase in the propensity to import of the South\",                         start = 5, end = 60) # Create new scenario with this shock model_reg <- add_scenario(model_reg, name = \"expansion1\", origin = \"baseline\",                            origin_period = 1, shock = shock_reg) # Simulate shock model_reg <- simulate_scenario(model_reg, scenario = \"expansion1\", max_iter = 350, periods = 100,                                 hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\") #> Simulating scenario expansion1 (1 of 1) #> Scenario(s) successfully simulated plot_simulation(model = model_reg, scenario = \"expansion1\", from = 1, to = 60,                  expressions = c(\"deltaV_S = V_S - dplyr::lag(V_S)\",                                  \"GB_S = TX_S - (G_S + dplyr::lag(r) * dplyr::lag(Bh_S))\",                                  \"TB_S = X_S - IM_S\"))"},{"path":"https://gamrot.github.io/godley/articles/05_Model_REG.html","id":"shock-2","dir":"Articles","previous_headings":"Shock scenarios","what":"Shock 2","title":"Model REG","text":"example implement increase government expenditures South. First need create empty shock: Next need add appropriate equation: Later need create new shock scenario: Now can simulate new shock scenario: can also display results shock scenario:","code":"# Create empty shock shock_reg <- create_shock() #> Shock object created # Add shock equation with increased government expenditures of the South shock_reg <- add_shock(shock_reg, equation = \"G_S = 25\",                         desc = \"An increase of government expenditures of the South\",                         start = 5, end = 50) # Create new scenario with this shock model_reg <- add_scenario(model_reg, name = \"expansion2\", origin = \"baseline\",                            origin_period = 1, shock = shock_reg) # Simulate shock model_reg <- simulate_scenario(model_reg, scenario = \"expansion2\", max_iter = 350, periods = 100,                                 hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\") #> Simulating scenario expansion2 (1 of 1) #> Scenario(s) successfully simulated plot_simulation(model = model_reg, scenario = \"expansion2\", from = 1, to = 50,                 expressions = c(\"deltaV_S = V_S - dplyr::lag(V_S)\",                                  \"GB_S = TX_S - (G_S + dplyr::lag(r) * dplyr::lag(Bh_S))\",                                  \"TB_S = X_S - IM_S\"))"},{"path":"https://gamrot.github.io/godley/articles/05_Model_REG.html","id":"shock-3","dir":"Articles","previous_headings":"Shock scenarios","what":"Shock 3","title":"Model REG","text":"example implement increase propensity save Southern households. First need create empty shock: Next need add appropriate equation: Later need create new shock scenario: Now can simulate new shock scenario: can also display results shock scenario:","code":"# Create empty shock shock_reg <- create_shock() #> Shock object created # Add shock equation with increased government expenditures of the South shock_reg <- add_shock(shock_reg, equation = \"alpha1_S = .6\",                         desc = \"Increased propensity to save of the Southern households\",                         start = 5, end = 50) # Create new scenario with this shock model_reg <- add_scenario(model_reg, name = \"expansion3\", origin = \"baseline\",                            origin_period = 100, shock = shock_reg) # Simulate shock model_reg <- simulate_scenario(model_reg, scenario = \"expansion3\", max_iter = 350, periods = 100,                                 hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\") #> Simulating scenario expansion3 (1 of 1) #> Scenario(s) successfully simulated plot_simulation(model = model_reg, scenario = \"expansion3\", from = 1, to = 50,                 expressions = c(\"deltaV_S = V_S - dplyr::lag(V_S)\",                                  \"GB_S = TX_S - (G_S + dplyr::lag(r) * dplyr::lag(Bh_S))\",                                  \"TB_S = X_S - IM_S\"))"},{"path":"https://gamrot.github.io/godley/articles/05_Model_REG.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Model REG","text":"information model REG can found Chapter 6 Monetary Economics. Integrated Approach Credit, Money, Income, Production Wealth.","code":""},{"path":"https://gamrot.github.io/godley/articles/06_Model_OPEN.html","id":"base-scenario","dir":"Articles","previous_headings":"","what":"Base scenario","title":"Model OPEN","text":"First need create empty SFC model: Next add variables: also add equations: Now can simulate model next 100 periods using Gauss method: Based calculated simulation can display results desired set variables:","code":"# Create empty model model_open <- create_model(name = \"SFC OPEN\") #> Empty model created # Add variables model_open <- add_variable(model_open, \"xr\", init = 1)  model_open <- add_variable(model_open, \"pg_N\", init = 1)  model_open <- add_variable(model_open, \"r_N\", init = 0.025)  model_open <- add_variable(model_open, \"r_S\", init = 0.025)  model_open <- add_variable(model_open, \"G_S\", init = 20)  model_open <- add_variable(model_open, \"G_N\", init = 20)  model_open <- add_variable(model_open, \"mu_N\", init = 0.15)  model_open <- add_variable(model_open, \"mu_S\", init = 0.15)  model_open <- add_variable(model_open, \"alpha1_N\", init = 0.7)  model_open <- add_variable(model_open, \"alpha1_S\", init = 0.8)  model_open <- add_variable(model_open, \"alpha2_N\", init = 0.3)  model_open <- add_variable(model_open, \"alpha2_S\", init = 0.2)  model_open <- add_variable(model_open, \"lambda0_N\", init = 0.67)  model_open <- add_variable(model_open, \"lambda0_S\", init = 0.67)  model_open <- add_variable(model_open, \"lambda1_N\", init = 0.05)  model_open <- add_variable(model_open, \"lambda1_S\", init = 0.05)  model_open <- add_variable(model_open, \"lambda2_N\", init = 0.01)  model_open <- add_variable(model_open, \"lambda2_S\", init = 0.01)  model_open <- add_variable(model_open, \"theta_N\", init = 0.2)  model_open <- add_variable(model_open, \"theta_S\", init = 0.2)  model_open <- add_variable(model_open, \"Y_N\")  model_open <- add_variable(model_open, \"Y_S\")  model_open <- add_variable(model_open, \"C_N\")  model_open <- add_variable(model_open, \"X_N\")  model_open <- add_variable(model_open, \"IM_N\")  model_open <- add_variable(model_open, \"C_S\")  model_open <- add_variable(model_open, \"X_S\")  model_open <- add_variable(model_open, \"IM_S\")  model_open <- add_variable(model_open, \"YD_N\")  model_open <- add_variable(model_open, \"YD_S\")  model_open <- add_variable(model_open, \"TX_S\")  model_open <- add_variable(model_open, \"TX_N\")  model_open <- add_variable(model_open, \"Bh_S\")  model_open <- add_variable(model_open, \"Bh_N\")  model_open <- add_variable(model_open, \"V_N\")  model_open <- add_variable(model_open, \"V_S\")  model_open <- add_variable(model_open, \"Hh_N\")  model_open <- add_variable(model_open, \"Hh_S\")  model_open <- add_variable(model_open, \"Bs_N\")  model_open <- add_variable(model_open, \"Bs_S\")  model_open <- add_variable(model_open, \"Bcb_N\")  model_open <- add_variable(model_open, \"Bcb_S\")  model_open <- add_variable(model_open, \"or_N\")  model_open <- add_variable(model_open, \"or_S\")  model_open <- add_variable(model_open, \"Hs_N\")  model_open <- add_variable(model_open, \"Hs_S\")  model_open <- add_variable(model_open, \"pg_S\")  model_open <- add_variable(model_open, \"deltaor_S\")  model_open <- add_variable(model_open, \"deltaor_N\") # Add equations model_open <- add_equation(model_open, \"Y_N = C_N + G_N + X_N - IM_N\")  model_open <- add_equation(model_open, \"Y_S = C_S + G_S + X_S - IM_S\")  model_open <- add_equation(model_open, \"IM_N = mu_N * Y_N\")  model_open <- add_equation(model_open, \"IM_S = mu_S * Y_S\")  model_open <- add_equation(model_open, \"X_N = IM_S / xr\")  model_open <- add_equation(model_open, \"X_S = IM_N * xr\")  model_open <- add_equation(model_open, \"YD_N = Y_N - TX_N + r_N[-1] * Bh_N[-1]\")  model_open <- add_equation(model_open, \"YD_S = Y_S - TX_S + r_S[-1] * Bh_S[-1]\")  model_open <- add_equation(model_open, \"TX_N = theta_N * ( Y_N + r_N[-1] * Bh_N[-1])\")  model_open <- add_equation(model_open, \"TX_S = theta_S * ( Y_S + r_S[-1] * Bh_S[-1])\")  model_open <- add_equation(model_open, \"V_N = V_N[-1] + ( YD_N - C_N )\")  model_open <- add_equation(model_open, \"V_S = V_S[-1] + ( YD_S - C_S )\")  model_open <- add_equation(model_open, \"C_N = alpha1_N * YD_N + alpha2_N * V_N[-1]\")  model_open <- add_equation(model_open, \"C_S = alpha1_S * YD_S + alpha2_S * V_S[-1]\")  model_open <- add_equation(model_open, \"Hh_N = V_N - Bh_N\")  model_open <- add_equation(model_open, \"Hh_S = V_S - Bh_S\")  model_open <- add_equation(model_open, \"Bh_N = V_N * ( lambda0_N + lambda1_N * r_N                             - lambda2_N * ( YD_N/V_N ) )\")  model_open <- add_equation(model_open, \"Bh_S = V_S * ( lambda0_S + lambda1_S * r_S                             - lambda2_S * ( YD_S/V_S ) )\")  model_open <- add_equation(model_open, \"Bs_N = Bs_N[-1] + ( G_N + r_N[-1] * Bs_N[-1] )                             - ( TX_N + r_N[-1] * Bcb_N[-1] )\")  model_open <- add_equation(model_open, \"Bs_S = Bs_S[-1] + ( G_S + r_S[-1] * Bs_S[-1] )                             - ( TX_S + r_S[-1] * Bcb_S[-1] )\")  model_open <- add_equation(model_open, \"Bcb_N = Bs_N - Bh_N\")  model_open <- add_equation(model_open, \"Bcb_S = Bs_S - Bh_S\")  model_open <- add_equation(model_open, \"or_N = or_N[-1] + (( Hs_N - Hs_N[-1]                             - ( Bcb_N - Bcb_N[-1] ) )/pg_N)\")  model_open <- add_equation(model_open, \"or_S = or_S[-1] + (( Hs_S - Hs_S[-1]                             - ( Bcb_S - Bcb_S[-1] ) )/pg_S)\")  model_open <- add_equation(model_open, \"Hs_N = Hh_N\")  model_open <- add_equation(model_open, \"Hs_S = Hh_S\")  model_open <- add_equation(model_open, \"pg_S = pg_N * xr\")  model_open <- add_equation(model_open, \"deltaor_S = or_S - or_S[-1]\")  model_open <- add_equation(model_open, \"deltaor_N = - (or_N - or_N[-1])\")  model_open <- add_equation(model_open, \"deltaor_S = deltaor_N\", hidden = TRUE) # Simulate model model_open <- simulate_scenario(model_open, scenario = \"baseline\", max_iter = 350, periods = 100,                                  hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\") #> Model prepared successfully #> Simulating scenario baseline (1 of 1) #> Scenario(s) successfully simulated plot_simulation(model = model_open, scenario = \"baseline\", from = 1, to = 50,                 expressions = c(\"TB_N = X_N - IM_N\",                                  \"TB_S = X_S - IM_S\",                                  \"GB_N = TX_N - (G_N + dplyr::lag(r_N) * dplyr::lag(Bh_N))\",                                  \"GB_S = TX_S - (G_S + dplyr::lag(r_S) * dplyr::lag(Bh_S))\")) plot_simulation(model = model_open, scenario = \"baseline\", from = 1, to = 50,                 expressions = c(\"Y_N\", \"Y_S\")) plot_simulation(model = model_open, scenario = \"baseline\", from = 1, to = 50,                 expressions = c(\"or_S\", \"or_N\"))"},{"path":"https://gamrot.github.io/godley/articles/06_Model_OPEN.html","id":"shock-scenario","dir":"Articles","previous_headings":"","what":"Shock scenario","title":"Model OPEN","text":"godley package can simulate shock affect base scenario. example implement ever-falling gold reserves. First need create empty shock: Next need add appropriate equation: need create new shock scenario: Now can simulate new shock scenario: can also plot simulation results shock scenario:","code":"# Create empty shock shock_open <- create_shock() #> Shock object created # Add shock equation shock_open <- add_shock(shock_open, equation = \"mu_S = 0.25\",                          desc = \"increase in the propensity to import in the South\",                          start = 5, end = 50) # Create new scenario with this shock model_open <- add_scenario(model_open, name = \"expansion\", origin = \"baseline\",                             origin_period = 100, shock = shock_open) # Simulate shock model_open <- simulate_scenario(model_open, scenario = \"expansion\", max_iter = 350, periods = 100,                                  hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\") #> Simulating scenario expansion (1 of 1) #> Scenario(s) successfully simulated plot_simulation(model = model_open, scenario = \"expansion\", from = 1, to = 50,                 expressions = c(\"TB_N = X_N - IM_N\",                                  \"TB_S = X_S - IM_S\",                                  \"GB_N = TX_N - (G_N + dplyr::lag(r_N) * dplyr::lag(Bh_N))\",                                  \"GB_S = TX_S - (G_S + dplyr::lag(r_S) * dplyr::lag(Bh_S))\")) plot_simulation(model = model_open, scenario = \"expansion\", from = 1, to = 50,                 expressions = c(\"Y_N\", \"Y_S\")) plot_simulation(model = model_open, scenario = \"expansion\", from = 1, to = 50,                 expressions = c(\"or_S\", \"or_N\"))"},{"path":"https://gamrot.github.io/godley/articles/06_Model_OPEN.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Model OPEN","text":"information model OPEN can found Chapter 6 Monetary Economics. Integrated Approach Credit, Money, Income, Production Wealth.","code":""},{"path":"https://gamrot.github.io/godley/articles/07_Model_BMW.html","id":"base-scenario","dir":"Articles","previous_headings":"","what":"Base scenario","title":"Model BMW","text":"First need create empty SFC model: Next add variables: also add equations: Now can simulate model (example next 100 periods using Gauss method): Based calculated simulation can display results desired set variables:","code":"# Create empty model model_bmw <- create_model(name = \"SFC BMW\") #> Empty model created # Add variables model_bmw <- add_variable(model_bmw, \"rl\", init = 0.025)  model_bmw <- add_variable(model_bmw, \"alpha0\", init = 20)  model_bmw <- add_variable(model_bmw, \"alpha1\", init = 0.75)  model_bmw <- add_variable(model_bmw, \"alpha2\", init = 0.10)  model_bmw <- add_variable(model_bmw, \"delta\", init = 0.10)  model_bmw <- add_variable(model_bmw, \"gamma\", init = 0.15)  model_bmw <- add_variable(model_bmw, \"kappa\", init = 1)  model_bmw <- add_variable(model_bmw, \"pr\", init = 1)  model_bmw <- add_variable(model_bmw, \"Nd\", init = .001)  model_bmw <- add_variable(model_bmw, \"Ns\", init = .001)  model_bmw <- add_variable(model_bmw, \"Y\", init = .001)  model_bmw <- add_variable(model_bmw, \"Cs\")  model_bmw <- add_variable(model_bmw, \"Cd\")  model_bmw <- add_variable(model_bmw, \"Is\")  model_bmw <- add_variable(model_bmw, \"Id\")  model_bmw <- add_variable(model_bmw, \"Ls\")  model_bmw <- add_variable(model_bmw, \"Ld\")  model_bmw <- add_variable(model_bmw, \"WBd\")  model_bmw <- add_variable(model_bmw, \"AF\")  model_bmw <- add_variable(model_bmw, \"K\")  model_bmw <- add_variable(model_bmw, \"YD\")  model_bmw <- add_variable(model_bmw, \"WBs\")  model_bmw <- add_variable(model_bmw, \"rm\")  model_bmw <- add_variable(model_bmw, \"Mh\")  model_bmw <- add_variable(model_bmw, \"Ms\")  model_bmw <- add_variable(model_bmw, \"W\")  model_bmw <- add_variable(model_bmw, \"DA\")  model_bmw <- add_variable(model_bmw, \"KT\") # Add equations model_bmw <- add_equation(model_bmw, \"Cs = Cd\")  model_bmw <- add_equation(model_bmw, \"Is = Id\")  model_bmw <- add_equation(model_bmw, \"Ns = Nd\")  model_bmw <- add_equation(model_bmw, \"Ls = Ls[-1] + Ld - Ld[-1]\")  model_bmw <- add_equation(model_bmw, \"Y = Cs + Is\")  model_bmw <- add_equation(model_bmw, \"WBd = Y - rl[-1] * Ld[-1] - AF\")  model_bmw <- add_equation(model_bmw, \"AF = delta * K[-1]\")  model_bmw <- add_equation(model_bmw, \"Ld = Ld[-1] + Id - AF\")  model_bmw <- add_equation(model_bmw, \"YD = WBs + rm[-1] * Mh[-1]\")  model_bmw <- add_equation(model_bmw, \"Mh = Mh[-1] + YD - Cd\")  model_bmw <- add_equation(model_bmw, \"Ms = Ms[-1] + Ls - Ls[-1]\")  model_bmw <- add_equation(model_bmw, \"rm = rl\")  model_bmw <- add_equation(model_bmw, \"WBs = W * Ns\")  model_bmw <- add_equation(model_bmw, \"Nd = Y / pr\")  model_bmw <- add_equation(model_bmw, \"W = WBd / Nd\")  model_bmw <- add_equation(model_bmw, \"Cd = alpha0 + alpha1 * YD + alpha2 * Mh[-1]\")  model_bmw <- add_equation(model_bmw, \"K = K[-1] + Id - DA\")  model_bmw <- add_equation(model_bmw, \"DA = delta * K[-1]\")  model_bmw <- add_equation(model_bmw, \"KT = kappa * Y[-1]\")  model_bmw <- add_equation(model_bmw, \"Id = gamma * (KT - K[-1]) + DA\")  model_bmw <- add_equation(model_bmw, \"Ms = Mh\", hidden = T) # Simulate model model_bmw <- simulate_scenario(model_bmw, scenario = \"baseline\", max_iter = 350, periods = 100,                                 hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\") #> Model prepared successfully #> Simulating scenario baseline (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(model = model_bmw, scenario = c(\"baseline\"), from = 1, to = 50,                  expressions = c(\"Cd\", \"YD\"))"},{"path":"https://gamrot.github.io/godley/articles/07_Model_BMW.html","id":"shock-scenarios","dir":"Articles","previous_headings":"","what":"Shock scenarios","title":"Model BMW","text":"godley can simulate shock affect base scenario.","code":""},{"path":"https://gamrot.github.io/godley/articles/07_Model_BMW.html","id":"shock-1","dir":"Articles","previous_headings":"Shock scenarios","what":"Shock 1","title":"Model BMW","text":"example implement increased autonomous consumption expenditures. First need create empty shock: Next need add appropriate equation: need create new shock scenario: Now can simulate new shock scenario: can also plot results shock scenarios:","code":"# Create empty shock shock_bmw <- create_shock() #> Shock object created # Add shock equation with increase in autonomous consumption expenditures shock_bmw <- add_shock(shock_bmw, equation = \"alpha0 = 30\",                         desc = \"Increase in autonomous consumption expenditures\", start = 5, end = 50) # Create new scenario with this shock model_bmw <- add_scenario(model_bmw, name = \"expansion1\", origin = \"baseline\",                            origin_period = 100, shock = shock_bmw) # Simulate shock model_bmw <- simulate_scenario(model_bmw, scenario = \"expansion1\", max_iter = 350, periods = 100,                                 hidden_tol = 0.1, tol = 1e-08, method = \"Newton\") #> Simulating scenario expansion1 (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(model = model_bmw, scenario = c(\"expansion1\"), from = 1, to = 50,                  expressions = c(\"Cd\", \"YD\"))"},{"path":"https://gamrot.github.io/godley/articles/07_Model_BMW.html","id":"shock-2","dir":"Articles","previous_headings":"Shock scenarios","what":"Shock 2","title":"Model BMW","text":"example implement increased propensity save. First need create empty shock: Next need add appropriate equation: Later need create new shock scenario: Now can simulate new shock scenario: can also plot results shock scenarios:","code":"# Create empty shock shock_bmw <- create_shock() #> Shock object created # Add shock equation with increased propensity to save shock_bmw <- add_shock(shock_bmw, equation = \"alpha1 = 0.7\",                         desc = \"Increase in the propensity to save\", start = 5, end = 50) # Create new scenario with this shock model_bmw <- add_scenario(model_bmw, name = \"expansion2\", origin = \"baseline\",                            origin_period = 100, shock = shock_bmw) # Simulate shock model_bmw <- simulate_scenario(model_bmw, scenario = \"expansion2\", max_iter = 350, periods = 100,                                 hidden_tol = 0.1, tol = 1e-08, method = \"Newton\") #> Simulating scenario expansion2 (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(model = model_bmw, scenario = c(\"expansion2\"), from = 1, to = 50,                  expressions = c(\"Cd\", \"YD\"))"},{"path":"https://gamrot.github.io/godley/articles/07_Model_BMW.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Model BMW","text":"information model BMW can found Chapter 7 Monetary Economics. Integrated Approach Credit, Money, Income, Production Wealth.","code":""},{"path":"https://gamrot.github.io/godley/articles/08_Model_BMWK.html","id":"base-scenario","dir":"Articles","previous_headings":"","what":"Base scenario","title":"Model BMWK","text":"First need create empty SFC model: Next add variables: also add equations: Now can simulate model (example next 100 periods using Gauss method): Based calculated simulation can display results desired set variables:","code":"# Create empty model model_bmwk <- create_model(name = \"SFC BMWK\") #> Empty model created # Add variables model_bmwk <- add_variable(model_bmwk, \"rl\", init = 0.025) model_bmwk <- add_variable(model_bmwk, \"alpha0\", init = 20) model_bmwk <- add_variable(model_bmwk, \"alpha2\", init = 0.10) model_bmwk <- add_variable(model_bmwk, \"delta\", init = 0.10) model_bmwk <- add_variable(model_bmwk, \"gamma\", init = 0.15) model_bmwk <- add_variable(model_bmwk, \"kappa\", init = 1) model_bmwk <- add_variable(model_bmwk, \"pr\", init = 1) model_bmwk <- add_variable(model_bmwk, \"Nd\", init = .001) model_bmwk <- add_variable(model_bmwk, \"Ns\", init = .001) model_bmwk <- add_variable(model_bmwk, \"Y\", init = .001) model_bmwk <- add_variable(model_bmwk, \"alpha1w\", init = .8) model_bmwk <- add_variable(model_bmwk, \"alpha1r\", init = .15) model_bmwk <- add_variable(model_bmwk, \"Cs\") model_bmwk <- add_variable(model_bmwk, \"Cd\") model_bmwk <- add_variable(model_bmwk, \"Is\") model_bmwk <- add_variable(model_bmwk, \"Id\") model_bmwk <- add_variable(model_bmwk, \"Ls\") model_bmwk <- add_variable(model_bmwk, \"Ld\") model_bmwk <- add_variable(model_bmwk, \"WBd\") model_bmwk <- add_variable(model_bmwk, \"AF\") model_bmwk <- add_variable(model_bmwk, \"K\") model_bmwk <- add_variable(model_bmwk, \"YD\") model_bmwk <- add_variable(model_bmwk, \"WBs\") model_bmwk <- add_variable(model_bmwk, \"rm\") model_bmwk <- add_variable(model_bmwk, \"Mh\") model_bmwk <- add_variable(model_bmwk, \"Ms\") model_bmwk <- add_variable(model_bmwk, \"W\") model_bmwk <- add_variable(model_bmwk, \"DA\") model_bmwk <- add_variable(model_bmwk, \"KT\") # Add equations model_bmwk <- add_equation(model_bmwk, \"Cs = Cd\") model_bmwk <- add_equation(model_bmwk, \"Is = Id\") model_bmwk <- add_equation(model_bmwk, \"Ns = Nd\") model_bmwk <- add_equation(model_bmwk, \"Ls = Ls[-1] + Ld - Ld[-1]\") model_bmwk <- add_equation(model_bmwk, \"Y = Cs + Is\") model_bmwk <- add_equation(model_bmwk, \"WBd = Y - rl[-1] * Ld[-1] - AF\") model_bmwk <- add_equation(model_bmwk, \"AF = delta * K[-1]\") model_bmwk <- add_equation(model_bmwk, \"Ld = Ld[-1] + Id - AF\") model_bmwk <- add_equation(model_bmwk, \"YD = WBs + rm[-1] * Mh[-1]\") model_bmwk <- add_equation(model_bmwk, \"Mh = Mh[-1] + YD - Cd\") model_bmwk <- add_equation(model_bmwk, \"Ms = Ms[-1] + Ls - Ls[-1]\") model_bmwk <- add_equation(model_bmwk, \"rm = rl\") model_bmwk <- add_equation(model_bmwk, \"WBs = W * Ns\") model_bmwk <- add_equation(model_bmwk, \"Nd = Y / pr\") model_bmwk <- add_equation(model_bmwk, \"W = WBd / Nd\") model_bmwk <- add_equation(model_bmwk, \"Cd = alpha0 + alpha1w * WBs + alpha1r * rm[-1] * Mh[-1] + alpha2 * Mh\") model_bmwk <- add_equation(model_bmwk, \"K = K[-1] + Id - DA\") model_bmwk <- add_equation(model_bmwk, \"DA = delta * K[-1]\") model_bmwk <- add_equation(model_bmwk, \"KT = kappa * Y[-1]\") model_bmwk <- add_equation(model_bmwk, \"Id = gamma * (KT - K[-1]) + DA\") model_bmwk <- add_equation(model_bmwk, \"Ms = Mh\", hidden = T) # Simulate model model_bmwk <- simulate_scenario(model_bmwk, scenario = \"baseline\", max_iter = 350, periods = 100,                                 hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\") #> Model prepared successfully #> Simulating scenario baseline (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(model = model_bmwk, scenario = c(\"baseline\"), from = 1, to = 50,                  expressions = c(\"Y\"))"},{"path":"https://gamrot.github.io/godley/articles/08_Model_BMWK.html","id":"shock-scenario","dir":"Articles","previous_headings":"","what":"Shock scenario","title":"Model BMWK","text":"can simulate now shock affect base scenario. example implement increase interest rate. First need create empty shock: Next need add appropriate equation: need create new shock scenario: Now can simulate new shock scenario: can also plot simulation results shock scenario:","code":"# Create empty shock shock_bmwk <- create_shock() #> Shock object created # Add shock equation shock_bmwk <- add_shock(shock_bmwk, equation = \"rl = 0.035\",                         desc = \"Increase in the interest rate\", start = 5, end = 50) # Create new scenario with this shock model_bmwk <- add_scenario(model_bmwk, name = \"expansion\", origin = \"baseline\",                            origin_period = 100, shock = shock_bmwk) # Simulate shock model_bmwk <- simulate_scenario(model_bmwk, scenario = \"expansion\", max_iter = 350, periods = 100,                                 hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\") #> Simulating scenario expansion (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(model = model_bmwk, scenario = c(\"expansion\"), from = 1, to = 50,                  expressions = c(\"Y\"))"},{"path":"https://gamrot.github.io/godley/articles/08_Model_BMWK.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Model BMWK","text":"information model BMWK can found Chapter 7 Monetary Economics. Integrated Approach Credit, Money, Income, Production Wealth.","code":""},{"path":"https://gamrot.github.io/godley/articles/09_Model_DIS.html","id":"base-scenario","dir":"Articles","previous_headings":"","what":"Base scenario","title":"Model DIS","text":"First need create empty SFC model: Next add variables: also add equations: Now can simulate model (example next 100 periods using Gauss method): Based calculated simulation can display results desired set variables:","code":"# Create empty model model_dis<- create_model(name = \"SFC DIS\") #> Empty model created # Add variables model_dis <- add_variable(model_dis, \"rl\", init = 0.025) model_dis <- add_variable(model_dis, \"pr\", init = 1) model_dis <- add_variable(model_dis, \"W\", init = 0.75) model_dis <- add_variable(model_dis, \"add\", init = 0.02) model_dis <- add_variable(model_dis, \"alpha0\", init = 15) model_dis <- add_variable(model_dis, \"alpha1\", init = 0.8) model_dis <- add_variable(model_dis, \"alpha2\", init = 0.1) model_dis <- add_variable(model_dis, \"beta\", init = 0.75) model_dis <- add_variable(model_dis, \"epsilon\", init = 0.75) model_dis <- add_variable(model_dis, \"gamma\", init = 0.25) model_dis <- add_variable(model_dis, \"phi\", init = 0.25) model_dis <- add_variable(model_dis, \"sigma_T\", init = 0.15) model_dis <- add_variable(model_dis, \"y\", init = .001) model_dis <- add_variable(model_dis, \"p\", init = .001) model_dis <- add_variable(model_dis, \"NHUC\", init = .001) model_dis <- add_variable(model_dis, \"s_E\", init = .001) model_dis <- add_variable(model_dis, \"inv_T\") model_dis <- add_variable(model_dis, \"inv_E\") model_dis <- add_variable(model_dis, \"inv\") model_dis <- add_variable(model_dis, \"s\") model_dis <- add_variable(model_dis, \"c\") model_dis <- add_variable(model_dis, \"N\") model_dis <- add_variable(model_dis, \"WB\") model_dis <- add_variable(model_dis, \"UC\") model_dis <- add_variable(model_dis, \"INV\") model_dis <- add_variable(model_dis, \"S\") model_dis <- add_variable(model_dis, \"EF\") model_dis <- add_variable(model_dis, \"Ld\") model_dis <- add_variable(model_dis, \"Ls\") model_dis <- add_variable(model_dis, \"Ms\") model_dis <- add_variable(model_dis, \"rm\") model_dis <- add_variable(model_dis, \"EFb\") model_dis <- add_variable(model_dis, \"Mh\") model_dis <- add_variable(model_dis, \"YD\") model_dis <- add_variable(model_dis, \"C\") model_dis <- add_variable(model_dis, \"ydhs\") model_dis <- add_variable(model_dis, \"mh\") model_dis <- add_variable(model_dis, \"ydhs_E\") # Add equations model_dis <- add_equation(model_dis, \"y = s_E + inv_E - inv[-1]\") model_dis <- add_equation(model_dis, \"inv_T = sigma_T * s_E\") model_dis <- add_equation(model_dis, \"inv_E = inv[-1] + gamma * (inv_T - inv[-1])\") model_dis <- add_equation(model_dis, \"inv = inv[-1] + (y - s)\") model_dis <- add_equation(model_dis, \"s_E = beta * s[-1] + (1 - beta) * s_E[-1]\") model_dis <- add_equation(model_dis, \"s = c\") model_dis <- add_equation(model_dis, \"N = y / pr\") model_dis <- add_equation(model_dis, \"WB = N * W\") model_dis <- add_equation(model_dis, \"UC = WB / y\") model_dis <- add_equation(model_dis, \"INV = inv * UC\") model_dis <- add_equation(model_dis, \"S = p * s\") model_dis <- add_equation(model_dis, \"p = (1 + phi) * NHUC\") model_dis <- add_equation(model_dis, \"NHUC = (1 - sigma_T) * UC + sigma_T * (1 + rl[-1]) * UC[-1]\") model_dis <- add_equation(model_dis, \"EF = S - WB + (INV - INV[-1]) - rl[-1] * INV[-1]\") model_dis <- add_equation(model_dis, \"Ld = INV\") model_dis <- add_equation(model_dis, \"Ls = Ld\") model_dis <- add_equation(model_dis, \"Ms = Ls\") model_dis <- add_equation(model_dis, \"rm = rl - add\") model_dis <- add_equation(model_dis, \"EFb = rl[-1] * Ls[-1] - rm[-1] * Mh[-1]\") model_dis <- add_equation(model_dis, \"YD = WB + EF + EFb + rm[-1] * Mh[-1]\") model_dis <- add_equation(model_dis, \"Mh = Mh[-1] + YD - C\") model_dis <- add_equation(model_dis, \"ydhs = c + (mh - mh[-1])\") model_dis <- add_equation(model_dis, \"C = c * p\") model_dis <- add_equation(model_dis, \"mh = Mh / p\") model_dis <- add_equation(model_dis, \"c = alpha0 + alpha1 * ydhs_E + alpha2 * mh[-1]\") model_dis <- add_equation(model_dis, \"ydhs_E = epsilon * ydhs[-1] + (1 - epsilon) * ydhs_E[-1]\") model_dis <- add_equation(model_dis, \"Mh = Ms\", hidden = T) # Simulate model model_dis<- simulate_scenario(model_dis, scenario = \"baseline\", max_iter = 350, periods = 100,                                hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\") #> Model prepared successfully #> Simulating scenario baseline (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(model = model_dis, scenario = c(\"baseline\"), from = 1, to = 50,                  expressions = c(\"ydhs\", \"c\")) # Plot results plot_simulation(model = model_dis, scenario = c(\"baseline\"), from = 1, to = 50,                  expressions = c(\"delta_inv = inv - dplyr::lag(inv)\",                                  \"delta_inv_E = inv_E - dplyr::lag(inv_E)\"))"},{"path":"https://gamrot.github.io/godley/articles/09_Model_DIS.html","id":"shock-scenario","dir":"Articles","previous_headings":"","what":"Shock scenario","title":"Model DIS","text":"godley package can simulate shock affect base scenario.","code":""},{"path":"https://gamrot.github.io/godley/articles/09_Model_DIS.html","id":"shock-1","dir":"Articles","previous_headings":"Shock scenario","what":"Shock 1","title":"Model DIS","text":"example implement one-shot increase costing margin. First need create empty shock: Next need add appropriate equation: need create new shock scenario: Now can simulate new shock scenario: can also display results plot:","code":"# Create empty shock shock_dis <- create_shock() #> Shock object created # Add shock equation shock_dis <- add_shock(shock_dis, equation = \"phi = 0.35\",                         desc = \"One-shot increase in the costing margin\", start = 5, end = 40) # Create new scenario with this shock model_dis<- add_scenario(model_dis, name = \"expansion1\", origin = \"baseline\",                           origin_period = 100, shock = shock_dis) # Simulate shock model_dis<- simulate_scenario(model_dis, scenario = \"expansion1\", max_iter = 350, periods = 100,                                hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\") #> Simulating scenario expansion1 (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(model = model_dis, scenario = c(\"expansion1\"), from = 1, to = 40,                  expressions = c(\"c\", \"ydhs\")) # Plot results plot_simulation(model = model_dis, scenario = c(\"expansion1\"), from = 1, to = 40,                  expressions = c(\"delta_inv = inv - dplyr::lag(inv)\",                                  \"delta_inv_E = inv_E - dplyr::lag(inv_E)\"))"},{"path":"https://gamrot.github.io/godley/articles/09_Model_DIS.html","id":"shock-2","dir":"Articles","previous_headings":"Shock scenario","what":"Shock 2","title":"Model DIS","text":"example implement increase target inventories sales ratio. First need create empty shock: Next need add appropriate equation: Later need create new shock scenario: Now can simulate new shock scenario: can also display results plot:","code":"# Create empty shock shock_dis <- create_shock() #> Shock object created # Add shock equation shock_dis <- add_shock(shock_dis, equation = \"sigma_T  = 0.25\",                         desc = \"Increase in the target inventories to sales ratio\", start = 5, end = 50) # Create new scenario with this shock model_dis<- add_scenario(model_dis, name = \"expansion2\", origin = \"baseline\",                           origin_period = 100, shock = shock_dis) # Simulate shock model_dis<- simulate_scenario(model_dis, scenario = \"expansion2\", max_iter = 350, periods = 100,                                hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\") #> Simulating scenario expansion2 (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(model = model_dis, scenario = c(\"expansion2\"), from = 1, to = 50,                  expressions = c(\"c\", \"ydhs\")) # Plot results plot_simulation(model = model_dis, scenario = c(\"expansion2\"), from = 1, to = 50,                  expressions = c(\"delta_inv = inv - dplyr::lag(inv)\",                                  \"delta_inv_E = inv_E - dplyr::lag(inv_E)\"))"},{"path":"https://gamrot.github.io/godley/articles/09_Model_DIS.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Model DIS","text":"information model DIS can found Chapter 9 Monetary Economics. Integrated Approach Credit, Money, Income, Production Wealth.","code":""},{"path":"https://gamrot.github.io/godley/articles/10_Model_DISINF.html","id":"base-scenario","dir":"Articles","previous_headings":"","what":"Base scenario","title":"Model DISINF","text":"First need create empty SFC model: Next add variables: also add equations: Now can simulate model (example next 100 periods using Gauss method): Based calculated simulation can display results desired set variables:","code":"# Create empty model model_disinf <- create_model(name = \"SFC DISINF\") #> Empty model created # Add variables model_disinf <- add_variable(model_disinf, \"rrc\", init = 0.025) model_disinf <- add_variable(model_disinf, \"pr\", init = 1) model_disinf <- add_variable(model_disinf, \"add\", init = 0.02) model_disinf <- add_variable(model_disinf, \"alpha0\", init = 15) model_disinf <- add_variable(model_disinf, \"alpha1\", init = 0.8) model_disinf <- add_variable(model_disinf, \"alpha2\", init = 0.1) model_disinf <- add_variable(model_disinf, \"beta\", init = 0.9) model_disinf <- add_variable(model_disinf, \"epsilon\", init = 0.8) model_disinf <- add_variable(model_disinf, \"gamma\", init = 0.25) model_disinf <- add_variable(model_disinf, \"phi\", init = 0.24) model_disinf <- add_variable(model_disinf, \"sigma_T\", init = 0.2) model_disinf <- add_variable(model_disinf, \"Omega0\", init = -1.4) model_disinf <- add_variable(model_disinf, \"Omega1\", init = 1) model_disinf <- add_variable(model_disinf, \"Omega2\", init = 1.2) model_disinf <- add_variable(model_disinf, \"Omega3\", init = 0.3) model_disinf <- add_variable(model_disinf, \"p\", init = 1) model_disinf <- add_variable(model_disinf, \"W\", init = 1) model_disinf <- add_variable(model_disinf, \"UC\", init = 1) model_disinf <- add_variable(model_disinf, \"s_E\", init = .00001) model_disinf <- add_variable(model_disinf, \"inv_T\") model_disinf <- add_variable(model_disinf, \"inv_E\") model_disinf <- add_variable(model_disinf, \"inv\") model_disinf <- add_variable(model_disinf, \"s\") model_disinf <- add_variable(model_disinf, \"c\") model_disinf <- add_variable(model_disinf, \"N\") model_disinf <- add_variable(model_disinf, \"WB\") model_disinf <- add_variable(model_disinf, \"INV\") model_disinf <- add_variable(model_disinf, \"S\") model_disinf <- add_variable(model_disinf, \"EF\") model_disinf <- add_variable(model_disinf, \"Ld\") model_disinf <- add_variable(model_disinf, \"Ls\") model_disinf <- add_variable(model_disinf, \"Ms\") model_disinf <- add_variable(model_disinf, \"rm\") model_disinf <- add_variable(model_disinf, \"EFb\") model_disinf <- add_variable(model_disinf, \"Mh\") model_disinf <- add_variable(model_disinf, \"YD\") model_disinf <- add_variable(model_disinf, \"C\") model_disinf <- add_variable(model_disinf, \"omega_T\") model_disinf <- add_variable(model_disinf, \"Nfe\") model_disinf <- add_variable(model_disinf, \"yfe\") model_disinf <- add_variable(model_disinf, \"mh\") model_disinf <- add_variable(model_disinf, \"y\") model_disinf <- add_variable(model_disinf, \"rl\") model_disinf <- add_variable(model_disinf, \"pic\") model_disinf <- add_variable(model_disinf, \"ydhs\") model_disinf <- add_variable(model_disinf, \"yd\") model_disinf <- add_variable(model_disinf, \"ydhs_E\") # Add equations model_disinf <- add_equation(model_disinf, \"y = s_E + inv_E - inv[-1]\") model_disinf <- add_equation(model_disinf, \"inv_T = sigma_T * s_E\") model_disinf <- add_equation(model_disinf, \"inv_E = inv[-1] + gamma * (inv_T - inv[-1])\") model_disinf <- add_equation(model_disinf, \"inv = inv[-1] + (y - s)\") model_disinf <- add_equation(model_disinf, \"s_E = beta * s[-1] + (1 - beta) * s_E[-1]\") model_disinf <- add_equation(model_disinf, \"s = c\") model_disinf <- add_equation(model_disinf, \"N = y / pr\") model_disinf <- add_equation(model_disinf, \"WB = N * W\") model_disinf <- add_equation(model_disinf, \"UC = WB / y\") model_disinf <- add_equation(model_disinf, \"INV = inv * UC\") model_disinf <- add_equation(model_disinf, \"S = p * s\") model_disinf <- add_equation(model_disinf, \"p = (1 + phi) * (1 + rrc * sigma_T) * UC\") model_disinf <- add_equation(model_disinf, \"EF = S - WB + (INV - INV[-1]) - rl * INV[-1]\") model_disinf <- add_equation(model_disinf, \"Ld = INV\") model_disinf <- add_equation(model_disinf, \"Ls = Ld\") model_disinf <- add_equation(model_disinf, \"Ms = Ls\") model_disinf <- add_equation(model_disinf, \"rm = rl - add\") model_disinf <- add_equation(model_disinf, \"EFb = rl[-1] * Ls[-1] - rm[-1] * Mh[-1]\") model_disinf <- add_equation(model_disinf, \"pic = (UC / UC[-1]) - 1\") model_disinf <- add_equation(model_disinf, \"rl = (1 + rrc) * (1 + pic) - 1\") model_disinf <- add_equation(model_disinf, \"YD = WB + EF + EFb + rm * Mh[-1]\") model_disinf <- add_equation(model_disinf, \"Mh = Mh[-1] + YD - C\") model_disinf <- add_equation(model_disinf, \"ydhs = c + (mh - mh[-1])\") model_disinf <- add_equation(model_disinf, \"yd = YD / p\") model_disinf <- add_equation(model_disinf, \"C = c * p\") model_disinf <- add_equation(model_disinf, \"mh = Mh / p\") model_disinf <- add_equation(model_disinf, \"c = alpha0 + alpha1 * ydhs_E + alpha2 * mh[-1]\") model_disinf <- add_equation(model_disinf, \"ydhs_E = epsilon * ydhs[-1] + (1 - epsilon) * ydhs_E[-1]\") model_disinf <- add_equation(model_disinf, \"omega_T = Omega0 + Omega1 * pr + Omega2 * (N / Nfe)\") model_disinf <- add_equation(model_disinf, \"W = W[-1] * (1 + Omega3 * (omega_T[-1] - (W[-1]/p[-1])))\") model_disinf <- add_equation(model_disinf, \"yfe = (1 + sigma_T) * s - inv[-1]\") model_disinf <- add_equation(model_disinf, \"Nfe = s / pr\") # Simulate model model_disinf<- simulate_scenario(model_disinf, scenario = \"baseline\", max_iter = 350, periods = 100,                                   hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\") #> Model prepared successfully #> Simulating scenario baseline (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(model = model_disinf, scenario = c(\"baseline\"), from = 1, to = 50,                  expressions = c(\"p\", \"UC\", \"UCp = UC/p\")) # Plot results plot_simulation(model = model_disinf, scenario = c(\"baseline\"), from = 1, to = 50,                  expressions = c(\"inflation = (p - dplyr::lag(p)) / dplyr::lag(p)\")) # Plot results plot_simulation(model = model_disinf, scenario = c(\"baseline\"), from = 1, to = 50,                  expressions = c(\"ydhs_ss = alpha0 / (1 - alpha1 - alpha2*sigma_T * (UC/p))\",                                  \"ydhs\", \"c\", \"s\"))"},{"path":"https://gamrot.github.io/godley/articles/10_Model_DISINF.html","id":"shock-scenario","dir":"Articles","previous_headings":"","what":"Shock scenario","title":"Model DISINF","text":"godley can simulate shock affect base scenario.","code":""},{"path":"https://gamrot.github.io/godley/articles/10_Model_DISINF.html","id":"shock-1","dir":"Articles","previous_headings":"Shock scenario","what":"Shock 1","title":"Model DISINF","text":"example implement increase costing margins. First need create empty shock: Next need add appropriate equation: need create new shock scenario: Now can simulate new shock scenario: can also display simulation results plots:","code":"# Create empty shock shock_disinf <- create_shock() #> Shock object created # Add shock equation shock_disinf <- add_shock(shock_disinf, equation = \"phi = 0.3\",                            desc = \"Increase in the costing margins\", start = 5, end = 50) # Create new scenario with this shock model_disinf <- add_scenario(model_disinf, name = \"expansion1\", origin = \"baseline\",                           origin_period = 100, shock = shock_disinf) # Simulate shock model_disinf <- simulate_scenario(model_disinf, scenario = \"expansion1\", max_iter = 350, periods = 100,                                hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\") #> Simulating scenario expansion1 (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(model = model_disinf, scenario = c(\"expansion1\"), from = 1, to = 50,                  expressions = c(\"p\", \"UC\", \"UCp = UC/p\")) # Plot results plot_simulation(model = model_disinf, scenario = c(\"expansion1\"), from = 1, to = 50,                  expressions = c(\"inflation = (p - dplyr::lag(p)) / dplyr::lag(p)\")) # Plot results plot_simulation(model = model_disinf, scenario = c(\"expansion1\"), from = 1, to = 50,                  expressions = c(\"ydhs_ss = alpha0 / (1 - alpha1 - alpha2*sigma_T * (UC/p))\",                                  \"ydhs\", \"c\", \"s\"))"},{"path":"https://gamrot.github.io/godley/articles/10_Model_DISINF.html","id":"shock-2","dir":"Articles","previous_headings":"Shock scenario","what":"Shock 2","title":"Model DISINF","text":"example implement increase target real wage. First need create empty shock: Next need add appropriate equation: need create new shock scenario: Now can simulate new shock scenario: can also display simulation results plots:","code":"# Create empty shock shock_disinf <- create_shock() #> Shock object created # Add shock equation shock_disinf <- add_shock(shock_disinf, equation = \"Omega0   = -1\",                            desc = \"Increase in the target real wage\", start = 5, end = 100) # Create new scenario with this shock model_disinf <- add_scenario(model_disinf, name = \"expansion2\", origin = \"baseline\",                               origin_period = 1, shock = shock_disinf) # Simulate shock model_disinf <- simulate_scenario(model_disinf, scenario = \"expansion2\", max_iter = 350, periods = 100,                                    hidden_tol = 0.1, tol = 1e-08, method = \"Gauss\") #> Simulating scenario expansion2 (1 of 1) #> Scenario(s) successfully simulated # Plot results plot_simulation(model = model_disinf, scenario = c(\"expansion2\"), from = 1, to = 50,                  expressions = c(\"p\", \"UC\", \"UCp = UC/p\")) # Plot results plot_simulation(model = model_disinf, scenario = c(\"expansion2\"), from = 1, to = 50,                  expressions = c(\"inflation = (p - dplyr::lag(p)) / dplyr::lag(p)\")) # Plot results plot_simulation(model = model_disinf, scenario = c(\"expansion2\"), from = 1, to = 50,                  expressions = c(\"ydhs_ss = alpha0 / (1 - alpha1 - alpha2*sigma_T * (UC/p))\",                                  \"ydhs\", \"c\", \"s\"))"},{"path":"https://gamrot.github.io/godley/articles/10_Model_DISINF.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Model DISINF","text":"information model DISINF can found Chapter 9 Monetary Economics. Integrated Approach Credit, Money, Income, Production Wealth.","code":""},{"path":[]},{"path":"https://gamrot.github.io/godley/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"(2022). godley: Stock-Flow-Consistent Model Simulator. R package version 0.1.0.","code":"@Manual{,   title = {godley: Stock-Flow-Consistent Model Simulator},   year = {2022},   note = {R package version 0.1.0}, }"},{"path":"https://gamrot.github.io/godley/index.html","id":"godley","dir":"","previous_headings":"","what":"Stock-Flow-Consistent Model Simulator","title":"Stock-Flow-Consistent Model Simulator","text":"godley R package simulating SFC (stock-flow consistent) models. can used create simulate fully fledged post-keynesian / MMT models economy. allows users apply shocks, simulate effects changing parameters, visualize different macro scenarios much . godley named Wynne Godley (1926-2010), famous British post-keynesian economist father stock-flow consistent modeling.","code":""},{"path":"https://gamrot.github.io/godley/index.html","id":"installation-️","dir":"","previous_headings":"","what":"Installation ⚙️","title":"Stock-Flow-Consistent Model Simulator","text":"best way start using godley install directly grom GitHub using devtools package.","code":"install.packages(\"devtools\") devtools::install_github(\"gamrot/godley\")"},{"path":"https://gamrot.github.io/godley/index.html","id":"usage-","dir":"","previous_headings":"","what":"Usage 📊","title":"Stock-Flow-Consistent Model Simulator","text":"can find simple example godley action. Let’s play well known “SIM model” Monetary Economics (Godley & Lavoie, 2007). First, need create empty model using create_model() function. Now let’s add variables using add_variable() function. add $varibles tibble model. Okay, let’s add equations, shall ? ’s function ! ’ve guessed , ’s add_equation() function. also adds tibble model, time ’s called $equations variables equations defined, ’s time run simulations using simulate_scenario() function. can choose simulation method (Newton Gauss) number periods (think quarters years). Results stored $result tibble $baseline scenario. everything done, can plot outcome using plot_simulation() function. can define variables expressions want. Let’s plot Income, Government spending Taxes. Scenario baseline one thing (’re lazy like ), can create models using “templates” using create_model(template = \"SIM\"). can choose SIM, PC, LP, REG, OPEN, BMW, BMWK, DIS, DISINF SIMEX. Basically models Godley & Lavoie (2007).","code":"model_sim <- create_model(name = \"SFC SIM\") model_sim <- model_sim |>   add_variable(\"C_d\", desc = \"Consumption demand by households\") |>   add_variable(\"C_s\", desc = \"Consumption supply\") |>   add_variable(\"G_s\", desc = \"Government supply\") |>   add_variable(\"H_h\", desc = \"Cash money held by households\") |>   add_variable(\"H_s\", desc = \"Cash money supplied by the government\") |>   add_variable(\"N_d\", desc = \"Demand for labor\") |>   add_variable(\"N_s\", desc = \"Supply of labor\") |>   add_variable(\"T_d\", desc = \"Taxes, demand\") |>   add_variable(\"T_s\", desc = \"Taxes, supply\") |>   add_variable(\"Y\", desc = \"Income = GDP\") |>   add_variable(\"Yd\", desc = \"Disposable income of households\") |>   add_variable(\"alpha1\", init = 0.6, desc = \"Propensity to consume out of income\") |>   add_variable(\"alpha2\", init = 0.4, desc = \"Propensity to consume out of wealth\") |>   add_variable(\"theta\", init = 0.2, desc = \"Tax rate\") |>   add_variable(\"G_d\", init = 20, desc = \"Government demand\") |>   add_variable(\"W\", init = 1, desc = \"Wage rate\")  model_sim$variables  ## # A tibble: 16 x 3 ##    name   desc                                   init ##    <chr>  <chr>                                 <dbl> ##  1 C_d    Consumption demand by households        0   ##  2 C_s    Consumption supply                      0   ##  3 G_s    Government supply                       0   ##  4 H_h    Cash money held by households           0   ##  5 H_s    Cash money supplied by the government   0   ##  6 N_d    Demand for labor                        0   ##  7 N_s    Supply of labor                         0   ##  8 T_d    Taxes, demand                           0   ##  9 T_s    Taxes, supply                           0   ## 10 Y      Income = GDP                            0   ## 11 Yd     Disposable income of households         0   ## 12 alpha1 Propensity to consume out of income     0.6 ## 13 alpha2 Propensity to consume out of wealth     0.4 ## 14 theta  Tax rate                                0.2 ## 15 G_d    Government demand                      20   ## 16 W      Wage rate                               1 model_sim <- model_sim |>   add_equation(\"C_s = C_d\", desc = \"Consumption\") |>   add_equation(\"G_s = G_d\") |>   add_equation(\"T_s = T_d\") |>   add_equation(\"N_s = N_d\") |>   add_equation(\"Yd = W * N_s - T_s\") |>   add_equation(\"T_d = theta * W * N_s\") |>   add_equation(\"C_d = alpha1 * Yd + alpha2 * H_h[-1]\") |>   add_equation(\"H_s = G_d - T_d + H_s[-1]\") |>   add_equation(\"H_h = Yd - C_d + H_h[-1]\") |>   add_equation(\"Y = C_s + G_s\") |>   add_equation(\"N_d = Y/W\") |>   add_equation(\"H_s = H_h\", desc = \"Money equilibrium\", hidden = TRUE)    model_sim$equations  ## # A tibble: 12 x 3 ##    equation                             desc                hidden ##    <chr>                                <chr>               <lgl>  ##  1 C_s = C_d                            \"Consumption\"       FALSE  ##  2 G_s = G_d                            \"\"                  FALSE  ##  3 T_s = T_d                            \"\"                  FALSE  ##  4 N_s = N_d                            \"\"                  FALSE  ##  5 Yd = W * N_s - T_s                   \"\"                  FALSE  ##  6 T_d = theta * W * N_s                \"\"                  FALSE  ##  7 C_d = alpha1 * Yd + alpha2 * H_h[-1] \"\"                  FALSE  ##  8 H_s = G_d - T_d + H_s[-1]            \"\"                  FALSE  ##  9 H_h = Yd - C_d + H_h[-1]             \"\"                  FALSE  ## 10 Y = C_s + G_s                        \"\"                  FALSE  ## 11 N_d = Y/W                            \"\"                  FALSE  ## 12 H_s = H_h                            \"Money equilibrium\" TRUE model_sim <- simulate_scenario(model = model_sim, scenario = \"baseline\", max_iter = 350,                                 periods = 100, hidden_tol = 0.1, tol = 1e-08, method = \"Newton\")  model_sim$baseline$result  ## # A tibble: 100 x 16 ##      C_s   G_s   T_s   N_s    Yd   T_d   C_d   H_s   H_h     Y   N_d alpha1 ##    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl> ##  1   0       0  0      0     0    0      0     0     0     0     0      0.5 ##  2  13.3    20  6.67  33.3  26.7  6.67  13.3  13.3  13.3  33.3  33.3    0.5 ##  3  22.2    20  8.44  42.2  33.8  8.44  22.2  24.9  24.9  42.2  42.2    0.5 ##  4  29.9    20  9.99  49.9  39.9  9.99  29.9  34.9  34.9  49.9  49.9    0.5 ##  5  36.6    20 11.3   56.6  45.3 11.3   36.6  43.6  43.6  56.6  56.6    0.5 ##  6  42.4    20 12.5   62.4  49.9 12.5   42.4  51.1  51.1  62.4  62.4    0.5 ##  7  47.4    20 13.5   67.4  53.9 13.5   47.4  57.6  57.6  67.4  67.4    0.5 ##  8  51.7    20 14.3   71.7  57.4 14.3   51.7  63.3  63.3  71.7  71.7    0.5 ##  9  55.5    20 15.1   75.5  60.4 15.1   55.5  68.2  68.2  75.5  75.5    0.5 ## 10  58.8    20 15.8   78.8  63.0 15.8   58.8  72.4  72.4  78.8  78.8    0.5 ## # ... with 90 more rows, and 4 more variables: alpha2 <dbl>, theta <dbl>, ## #   G_d <dbl>, W <dbl> plot_simulation(model = model_sim, scenario = \"baseline\", from = 1, to = 50,                  expressions = c(\"Y\", \"G_s\", \"T_s\"))"},{"path":"https://gamrot.github.io/godley/index.html","id":"shocks-","dir":"","previous_headings":"Usage 📊","what":"Shocks ⚡","title":"Stock-Flow-Consistent Model Simulator","text":"godley allows create simulate shocks. Let’s see happens increase government spending. create shock first need create empty shock object create_shock(). Next let’s see ’s gonna happen use add_shock() function increase government spending 5 units 5th 50th period. everything defined, let’s add new scenario using add_scenario() function. first need instruct godley scenario use starting point (period). shock scenario created can simulate using now familiar simulate_scenario() function. Now let’s see result using plot_simulation() function. can see, increase government expenditures positive effect income… positive short-term effect government balance. Scenario expansion","code":"sim_shock <- create_shock()   sim_shock <- add_shock(shock = sim_shock, equation = \"G_d = 25\",                             desc = \"permanent increase in government expenditures\",                             start = 5, end = 50)  sim_shock  ## # A tibble: 1 x 4 ##   equation desc                                          start   end ##   <chr>    <chr>                                         <dbl> <dbl> ## 1 G_d = 25 permanent increase in government expenditures     5    50 model_sim <- add_scenario(model = model_sim, name = \"expansion\", origin = \"baseline\",                            origin_period = 100, shock = sim_shock) model_sim <- simulate_scenario(model = model_sim, max_iter = 350, periods = 100,                                 hidden_tol = 0.1, tol = 1e-08, method = \"Newton\")  model_sim$expansion$result  ## # A tibble: 100 x 16 ##      C_s   G_s   T_s   N_s    Yd   T_d   C_d   H_s   H_h     Y   N_d alpha1 ##    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl> ##  1   0       0  0      0     0    0      0     0     0     0     0      0.5 ##  2  13.3    20  6.67  33.3  26.7  6.67  13.3  13.3  13.3  33.3  33.3    0.5 ##  3  22.2    20  8.44  42.2  33.8  8.44  22.2  24.9  24.9  42.2  42.2    0.5 ##  4  29.9    20  9.99  49.9  39.9  9.99  29.9  34.9  34.9  49.9  49.9    0.5 ##  5  39.9    25 13.0   64.9  51.9 13.0   39.9  46.9  46.9  64.9  64.9    0.5 ##  6  47.9    25 14.6   72.9  58.4 14.6   47.9  57.3  57.3  72.9  72.9    0.5 ##  7  54.9    25 16.0   79.9  63.9 16.0   54.9  66.4  66.4  79.9  79.9    0.5 ##  8  60.9    25 17.2   85.9  68.7 17.2   60.9  74.2  74.2  85.9  85.9    0.5 ##  9  66.1    25 18.2   91.1  72.9 18.2   66.1  80.9  80.9  91.1  91.1    0.5 ## 10  70.6    25 19.1   95.6  76.5 19.1   70.6  86.8  86.8  95.6  95.6    0.5 ## # ... with 90 more rows, and 4 more variables: alpha2 <dbl>, theta <dbl>, ## #   G_d <dbl>, W <dbl> plot_simulation(model = model_sim, scenario = c(\"expansion\"), from = 1, to = 50,                  expressions = c(\"Y\", \"G_s\", \"T_s\"))"},{"path":"https://gamrot.github.io/godley/index.html","id":"sensitivity-","dir":"","previous_headings":"Usage 📊","what":"Sensitivity 🧙","title":"Stock-Flow-Consistent Model Simulator","text":"godley allows users see simulation results sensitive parameter changes. , don’t want create models make sense just specific combination parameters. Let’s see small changes alpha1 affect short-term model dynamics. First need create new object using create_sensitivity() function define lower upper bounds parameter want analyze. Now ’re ready simulate results see plot. Sensitivity","code":"model_sens <- create_sensitivity(model_pass = model_sim, variable = \"alpha1\",                   lower = 0.1, upper = 0.7, step = 0.05) model_sens <- simulate_scenario(model = model_sens, max_iter = 350, periods = 100,                                  hidden_tol = 0.1, tol = 1e-08, method = \"Newton\")  plot_simulation(model = model_sens, scenario = \"sensitivity\", take_all = TRUE,                  from = 1, to = 50, expressions = c(\"Y\"))"},{"path":"https://gamrot.github.io/godley/index.html","id":"functions-","dir":"","previous_headings":"","what":"Functions 🔧","title":"Stock-Flow-Consistent Model Simulator","text":"’s list package’s important functions. create_model() - creates SFC modeladd_variable() - adds variableadd_equation() - adds equationsimulate_scenario() - simulates selected scenario(s)plot_simulation() - plots simulation results create_shock() - creates SFC_shock objectadd_shock() - adds shock equationsadd_scenario() - adds scenario existing model create_sensitivity() - creates new SFC model sensitivity scenarios selected parameters.","code":""},{"path":"https://gamrot.github.io/godley/index.html","id":"similar-work-","dir":"","previous_headings":"","what":"Similar work 👪","title":"Stock-Flow-Consistent Model Simulator","text":"two packages also allows users build stock-flow consistent models: sfcr - definitely check ! pysolve3","code":""},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://gamrot.github.io/godley/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://gamrot.github.io/godley/reference/add_equation.html","id":null,"dir":"Reference","previous_headings":"","what":"Add equation to the model — add_equation","title":"Add equation to the model — add_equation","text":"Add equation model","code":""},{"path":"https://gamrot.github.io/godley/reference/add_equation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add equation to the model — add_equation","text":"","code":"add_equation(model, equation, desc = \"\", hidden = FALSE)"},{"path":"https://gamrot.github.io/godley/reference/add_equation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add equation to the model — add_equation","text":"model SFC model object equation string equation format: 'x = y + z - * b + (c + d) / e + f[-1]' desc string equation description hidden logical, indicates equation written hidden, defaults FALSE","code":""},{"path":"https://gamrot.github.io/godley/reference/add_equation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add equation to the model — add_equation","text":"updated SFC model object containing added equation","code":""},{"path":"https://gamrot.github.io/godley/reference/add_scenario.html","id":null,"dir":"Reference","previous_headings":"","what":"Add scenario to the model — add_scenario","title":"Add scenario to the model — add_scenario","text":"Add scenario model","code":""},{"path":"https://gamrot.github.io/godley/reference/add_scenario.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add scenario to the model — add_scenario","text":"","code":"add_scenario(   model,   name = \"expansion\",   origin = \"baseline\",   origin_period = 1,   shock )"},{"path":"https://gamrot.github.io/godley/reference/add_scenario.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add scenario to the model — add_scenario","text":"model SFC model object name string name scenario, defaults 'expansion' origin string name origin scenario, new scenario created, defaults 'baseline' origin_period numeric period number origin scenario new scenario begin, defaults 1 shock shock object create_shock() add_shock()","code":""},{"path":"https://gamrot.github.io/godley/reference/add_scenario.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add scenario to the model — add_scenario","text":"updated SFC model object containing added scenario","code":""},{"path":"https://gamrot.github.io/godley/reference/add_shock.html","id":null,"dir":"Reference","previous_headings":"","what":"Add shock to shock object — add_shock","title":"Add shock to shock object — add_shock","text":"Add shock shock object","code":""},{"path":"https://gamrot.github.io/godley/reference/add_shock.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add shock to shock object — add_shock","text":"","code":"add_shock(shock, equation, desc = \"\", start = NA, end = NA)"},{"path":"https://gamrot.github.io/godley/reference/add_shock.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add shock to shock object — add_shock","text":"shock tibble create_shock() equation string equation format: 'x = 2' desc string variable description start numeric period number shock take place, defaults NA end numeric period number shock take place, defaults NA","code":""},{"path":"https://gamrot.github.io/godley/reference/add_shock.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add shock to shock object — add_shock","text":"updated shock object containing added shock","code":""},{"path":"https://gamrot.github.io/godley/reference/add_variable.html","id":null,"dir":"Reference","previous_headings":"","what":"Add variable to the model — add_variable","title":"Add variable to the model — add_variable","text":"Add variable model","code":""},{"path":"https://gamrot.github.io/godley/reference/add_variable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add variable to the model — add_variable","text":"","code":"add_variable(model, name, init = 0, desc = \"\")"},{"path":"https://gamrot.github.io/godley/reference/add_variable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add variable to the model — add_variable","text":"model SFC model object name string name added variable init numeric initial value, defaults 1e-15 desc string variable description","code":""},{"path":"https://gamrot.github.io/godley/reference/add_variable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add variable to the model — add_variable","text":"updated SFC model object containing added variable","code":""},{"path":"https://gamrot.github.io/godley/reference/change_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Change initial value of a variable — change_init","title":"Change initial value of a variable — change_init","text":"Change initial value variable","code":""},{"path":"https://gamrot.github.io/godley/reference/change_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change initial value of a variable — change_init","text":"","code":"change_init(model, name, value)"},{"path":"https://gamrot.github.io/godley/reference/change_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change initial value of a variable — change_init","text":"model SFC model object name string variable name value numeric value replace existing initial value","code":""},{"path":"https://gamrot.github.io/godley/reference/change_init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change initial value of a variable — change_init","text":"updated SFC model object new variable initial value","code":""},{"path":"https://gamrot.github.io/godley/reference/create_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Create SFC model object — create_model","title":"Create SFC model object — create_model","text":"Create SFC model object","code":""},{"path":"https://gamrot.github.io/godley/reference/create_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create SFC model object — create_model","text":"","code":"create_model(name = \"SFC model\", template)"},{"path":"https://gamrot.github.io/godley/reference/create_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create SFC model object — create_model","text":"name string name created SFC model object template string name model template chosen : 'SIM', 'PC', 'LP', 'REG', 'OPEN', 'BMW', 'BMWK', 'DIS', 'DISINF', 'SIMEX' user created SFC model object used template","code":""},{"path":"https://gamrot.github.io/godley/reference/create_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create SFC model object — create_model","text":"SFC model object","code":""},{"path":"https://gamrot.github.io/godley/reference/create_sensitivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Create model with sensitivity scenarios — create_sensitivity","title":"Create model with sensitivity scenarios — create_sensitivity","text":"Create model sensitivity scenarios","code":""},{"path":"https://gamrot.github.io/godley/reference/create_sensitivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create model with sensitivity scenarios — create_sensitivity","text":"","code":"create_sensitivity(model_pass, variable, lower = 0, upper = 1, step = 0.1)"},{"path":"https://gamrot.github.io/godley/reference/create_sensitivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create model with sensitivity scenarios — create_sensitivity","text":"model_pass SFC model object used baseline sensitivity calculation variable string name variable used lower numeric lower bound value variable upper numeric upper bound value variable step numeric step upper lower bounds variable take value","code":""},{"path":"https://gamrot.github.io/godley/reference/create_sensitivity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create model with sensitivity scenarios — create_sensitivity","text":"SFC model object sensitivity scenarios","code":""},{"path":"https://gamrot.github.io/godley/reference/create_shock.html","id":null,"dir":"Reference","previous_headings":"","what":"Create shock used in add_scenario(). — create_shock","title":"Create shock used in add_scenario(). — create_shock","text":"Create shock used add_scenario().","code":""},{"path":"https://gamrot.github.io/godley/reference/create_shock.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create shock used in add_scenario(). — create_shock","text":"","code":"create_shock()"},{"path":"https://gamrot.github.io/godley/reference/create_shock.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create shock used in add_scenario(). — create_shock","text":"shock object","code":""},{"path":"https://gamrot.github.io/godley/reference/d.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate 1 order lag difference of a variable in model — d","title":"Calculate 1 order lag difference of a variable in model — d","text":"Calculate 1 order lag difference variable model","code":""},{"path":"https://gamrot.github.io/godley/reference/d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate 1 order lag difference of a variable in model — d","text":"","code":"d(x)"},{"path":"https://gamrot.github.io/godley/reference/d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate 1 order lag difference of a variable in model — d","text":"x variable name","code":""},{"path":"https://gamrot.github.io/godley/reference/d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate 1 order lag difference of a variable in model — d","text":"difference","code":""},{"path":"https://gamrot.github.io/godley/reference/d.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate 1 order lag difference of a variable in model — d","text":"special function used exclusively model equation strings e.g. \"x = d(y) + z\"","code":""},{"path":"https://gamrot.github.io/godley/reference/plot_simulation.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot simulations of multiple variables in multiple scenarios — plot_simulation","title":"Plot simulations of multiple variables in multiple scenarios — plot_simulation","text":"Plot simulations multiple variables multiple scenarios","code":""},{"path":"https://gamrot.github.io/godley/reference/plot_simulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot simulations of multiple variables in multiple scenarios — plot_simulation","text":"","code":"plot_simulation(   model,   scenario = \"baseline\",   take_all = FALSE,   from = 1,   to = NA,   expressions = \"Y\" )"},{"path":"https://gamrot.github.io/godley/reference/plot_simulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot simulations of multiple variables in multiple scenarios — plot_simulation","text":"model SFC model object scenario vector strings single string name scenario(s) take variables values, defaults 'baseline' take_all logical indicating whether scenarios containing given scenario name string(s) used, defaults FALSE numeric period number plot start, defaults 1 numeric period number plot end, defaults NA expressions vector strings single string name variable(s) expression(s) plot, defaults 'Y'","code":""},{"path":"https://gamrot.github.io/godley/reference/plot_simulation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot simulations of multiple variables in multiple scenarios — plot_simulation","text":"plotly plot","code":""},{"path":"https://gamrot.github.io/godley/reference/prepare.html","id":null,"dir":"Reference","previous_headings":"","what":"Make initial matrix row for baseline scenario and prepare equations for simulate_scenario() — prepare","title":"Make initial matrix row for baseline scenario and prepare equations for simulate_scenario() — prepare","text":"Make initial matrix row baseline scenario prepare equations simulate_scenario()","code":""},{"path":"https://gamrot.github.io/godley/reference/prepare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make initial matrix row for baseline scenario and prepare equations for simulate_scenario() — prepare","text":"","code":"prepare(model)"},{"path":"https://gamrot.github.io/godley/reference/prepare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make initial matrix row for baseline scenario and prepare equations for simulate_scenario() — prepare","text":"model SFC model object","code":""},{"path":"https://gamrot.github.io/godley/reference/prepare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make initial matrix row for baseline scenario and prepare equations for simulate_scenario() — prepare","text":"verified prepared SFC model object","code":""},{"path":"https://gamrot.github.io/godley/reference/simulate_scenario.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate scenario of SFC model object — simulate_scenario","title":"Simulate scenario of SFC model object — simulate_scenario","text":"Simulate scenario SFC model object","code":""},{"path":"https://gamrot.github.io/godley/reference/simulate_scenario.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate scenario of SFC model object — simulate_scenario","text":"","code":"simulate_scenario(   model,   scenario,   max_iter = 350,   periods = 100,   hidden_tol = 0.1,   tol = 1e-08,   method = \"Gauss\" )"},{"path":"https://gamrot.github.io/godley/reference/simulate_scenario.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate scenario of SFC model object — simulate_scenario","text":"model SFC model object scenario vector strings single string name scenario(s) simulate max_iter numeric maximum iterations allowed per period, defaults 350 periods numeric total number rows (periods) model, defaults 100 hidden_tol numeric error tolerance accept equality hidden equations, defaults 0.1. tol numeric tolerance accepted determine convergence, defaults 1e-08 method string name method used find solution chosen : 'Gauss', 'Newton', defaults 'Gauss'","code":""},{"path":"https://gamrot.github.io/godley/reference/simulate_scenario.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate scenario of SFC model object — simulate_scenario","text":"updated model containing simulated scenario(s)","code":""}]
