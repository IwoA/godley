if (all(checks[.id] < tol)) {
break
} else {
for (.v in .id) {
holdouts[[.v]] <- m[.i, .v]
}
}
}
}
}
}
str(.id)
for (.i in 2:periods) {
for (.block in seq_along(blocks)) {
.id <- equations_id[[.block]]
# If 1 variable in the block, it is deterministic and no iteration is required.
if (length(.id) == 1) {
m[.i, .id] <- eval(exprs[[.id]])
#m[.i, block_names[[.block]]] <- 1
if(is.na(m[.i, .id])){
stop(message = paste('Gauss-Seidel algorithm failed.
During computation NaN was obtained in ', .id , ' equation ',
'Check if equations are correctly specified or change initial values.'))
}
}
# If cyclical block, use Gauss-Seidel algorithm
else {
for (.ite in 1:max_iter) {
for (.v in .id) {
m[.i, .v] <- suppressMessages(eval(exprs[[.v]]))
if(is.na(m[.i, .v])){
#  stop(message = paste('Gauss-Seidel algorithm failed.
# During computation NaN was obtained in ', .v , ' equation ',
# 'Check if equations are correctly specified or change initial values.'))
}
checks[[.v]] <- suppressMessages(abs(m[.i, .v] - holdouts[[.v]])/(holdouts[[.v]] + 1e-15))
}
#m[.i, block_names[[.block]]] <- .ite
if (any(!is.finite(checks[.id]) | is.na(checks[.id])))
stop(message = paste("Gauss-Seidel algorithm failed to converge.
Check the initial values to exclude any division by zero
or other invalid operations. Problem occured in ", str(.id), " equations block.",
"If the problem persists,try a different method."))
if (all(checks[.id] < tol)) {
break
} else {
for (.v in .id) {
holdouts[[.v]] <- m[.i, .v]
}
}
}
}
}
}
for (.i in 2:periods) {
for (.block in seq_along(blocks)) {
.id <- equations_id[[.block]]
# If 1 variable in the block, it is deterministic and no iteration is required.
if (length(.id) == 1) {
m[.i, .id] <- eval(exprs[[.id]])
#m[.i, block_names[[.block]]] <- 1
if(is.na(m[.i, .id])){
stop(message = paste('Gauss-Seidel algorithm failed.
During computation NaN was obtained in ', .id , ' equation ',
'Check if equations are correctly specified or change initial values.'))
}
}
# If cyclical block, use Gauss-Seidel algorithm
else {
for (.ite in 1:max_iter) {
for (.v in .id) {
m[.i, .v] <- suppressMessages(eval(exprs[[.v]]))
if(is.na(m[.i, .v])){
#  stop(message = paste('Gauss-Seidel algorithm failed.
# During computation NaN was obtained in ', .v , ' equation ',
# 'Check if equations are correctly specified or change initial values.'))
}
checks[[.v]] <- suppressMessages(abs(m[.i, .v] - holdouts[[.v]])/(holdouts[[.v]] + 1e-15))
}
#m[.i, block_names[[.block]]] <- .ite
if (any(!is.finite(checks[.id]) | is.na(checks[.id])))
stop(message = paste("Gauss-Seidel algorithm failed to converge.
Check the initial values to exclude any division by zero
or other invalid operations. Problem occured in ", .id, " equations block.",
"If the problem persists,try a different method."),call. = FALSE)
if (all(checks[.id] < tol)) {
break
} else {
for (.v in .id) {
holdouts[[.v]] <- m[.i, .v]
}
}
}
}
}
}
for (.i in 2:periods) {
for (.block in seq_along(blocks)) {
.id <- equations_id[[.block]]
# If 1 variable in the block, it is deterministic and no iteration is required.
if (length(.id) == 1) {
m[.i, .id] <- eval(exprs[[.id]])
#m[.i, block_names[[.block]]] <- 1
if(is.na(m[.i, .id])){
stop(message = paste('Gauss-Seidel algorithm failed.
During computation NaN was obtained in ', .id , ' equation ',
'Check if equations are correctly specified or change initial values.'))
}
}
# If cyclical block, use Gauss-Seidel algorithm
else {
for (.ite in 1:max_iter) {
for (.v in .id) {
m[.i, .v] <- suppressMessages(eval(exprs[[.v]]))
if(is.na(m[.i, .v])){
#  stop(message = paste('Gauss-Seidel algorithm failed.
# During computation NaN was obtained in ', .v , ' equation ',
# 'Check if equations are correctly specified or change initial values.'))
}
checks[[.v]] <- suppressMessages(abs(m[.i, .v] - holdouts[[.v]])/(holdouts[[.v]] + 1e-15))
}
#m[.i, block_names[[.block]]] <- .ite
if (any(!is.finite(checks[.id]) | is.na(checks[.id])))
rlang::abort(message = paste("Gauss-Seidel algorithm failed to converge.
Check the initial values to exclude any division by zero
or other invalid operations. Problem occured in ", .id, " equations block.",
"If the problem persists,try a different method."),call. = FALSE)
if (all(checks[.id] < tol)) {
break
} else {
for (.v in .id) {
holdouts[[.v]] <- m[.i, .v]
}
}
}
}
}
}
for (.i in 2:periods) {
for (.block in seq_along(blocks)) {
.id <- equations_id[[.block]]
# If 1 variable in the block, it is deterministic and no iteration is required.
if (length(.id) == 1) {
m[.i, .id] <- eval(exprs[[.id]])
#m[.i, block_names[[.block]]] <- 1
if(is.na(m[.i, .id])){
stop(message = paste('Gauss-Seidel algorithm failed.
During computation NaN was obtained in ', .id , ' equation ',
'Check if equations are correctly specified or change initial values.'))
}
}
# If cyclical block, use Gauss-Seidel algorithm
else {
for (.ite in 1:max_iter) {
for (.v in .id) {
m[.i, .v] <- suppressMessages(eval(exprs[[.v]]))
if(is.na(m[.i, .v])){
#  stop(message = paste('Gauss-Seidel algorithm failed.
# During computation NaN was obtained in ', .v , ' equation ',
# 'Check if equations are correctly specified or change initial values.'))
}
checks[[.v]] <- suppressMessages(abs(m[.i, .v] - holdouts[[.v]])/(holdouts[[.v]] + 1e-15))
}
#m[.i, block_names[[.block]]] <- .ite
if (any(!is.finite(checks[.id]) | is.na(checks[.id])))
rlang::abort(message = paste("Gauss-Seidel algorithm failed to converge.
Check the initial values to exclude any division by zero
or other invalid operations. Problem occured in ", .id, " equations block.",
"If the problem persists,try a different method."),call. = T)
if (all(checks[.id] < tol)) {
break
} else {
for (.v in .id) {
holdouts[[.v]] <- m[.i, .v]
}
}
}
}
}
}
for (.i in 2:periods) {
for (.block in seq_along(blocks)) {
.id <- equations_id[[.block]]
# If 1 variable in the block, it is deterministic and no iteration is required.
if (length(.id) == 1) {
m[.i, .id] <- eval(exprs[[.id]])
#m[.i, block_names[[.block]]] <- 1
if(is.na(m[.i, .id])){
stop(message = paste('Gauss-Seidel algorithm failed.
During computation NaN was obtained in ', .id , ' equation ',
'Check if equations are correctly specified or change initial values.'))
}
}
# If cyclical block, use Gauss-Seidel algorithm
else {
for (.ite in 1:max_iter) {
for (.v in .id) {
m[.i, .v] <- suppressMessages(eval(exprs[[.v]]))
if(is.na(m[.i, .v])){
#  stop(message = paste('Gauss-Seidel algorithm failed.
# During computation NaN was obtained in ', .v , ' equation ',
# 'Check if equations are correctly specified or change initial values.'))
}
checks[[.v]] <- suppressMessages(abs(m[.i, .v] - holdouts[[.v]])/(holdouts[[.v]] + 1e-15))
}
#m[.i, block_names[[.block]]] <- .ite
if (any(!is.finite(checks[.id]) | is.na(checks[.id])))
stop(message = paste("Gauss-Seidel algorithm failed to converge.
Check the initial values to exclude any division by zero
or other invalid operations. Problem occured in ", .id, " equations block.",
"If the problem persists,try a different method."),call. = T)
if (all(checks[.id] < tol)) {
break
} else {
for (.v in .id) {
holdouts[[.v]] <- m[.i, .v]
}
}
}
}
}
}
paste("Gauss-Seidel algorithm failed to converge.
Check the initial values to exclude any division by zero
or other invalid operations. Problem occured in ", .id, " equations block.",
"If the problem persists,try a different method."))
paste0("Gauss-Seidel algorithm failed to converge.
Check the initial values to exclude any division by zero
or other invalid operations. Problem occured in ", .id, " equations block.",
"If the problem persists,try a different method.")
paste0("aaa", c(1,2,3), "xd")
paste0("aaa", c('1','2','3'), "xd")
paste(c("The list is:", 1:5), collapse= " ")
paste0("Gauss-Seidel algorithm failed to converge.
Check the initial values to exclude any division by zero
or other invalid operations. Problem occured in ", .id, " equations block.",
"If the problem persists,try a different method.", collapse= " ")
paste0("Gauss-Seidel algorithm failed to converge.
Check the initial values to exclude any division by zero
or other invalid operations. Problem occured in ", .id, " equations block.",
"If the problem persists,try a different method.", collapse= "")
paste("Gauss-Seidel algorithm failed to converge.
Check the initial values to exclude any division by zero
or other invalid operations. Problem occured in ", .id, " equations block.",
"If the problem persists,try a different method.", collapse= "")
paste0(c("The list is:", 1:5), collapse= " ")
paste0(c("The list is:", 1:5, "hehe"), collapse= " ")
paste0(c("The list is:", 1:5, "hehe"))
.id
paste0(c("The list is:", .id, "hehe"))
paste0(c("The list is:", .id, "hehe"), collapse = "")
paste0(c("The list is:", .id, "hehe"), collapse = " ")
paste("Gauss-Seidel algorithm failed to converge.
Check the initial values to exclude any division by zero
or other invalid operations. Problem occured in ", .id)
paste("Gauss-Seidel algorithm failed to converge.
Check the initial values to exclude any division by zero
or other invalid operations. Problem occured in ", .id, collapse = " ")
paste("Gauss-Seidel algorithm failed to converge or other invalid operations. Problem occured in ", .id, collapse = " ")
paste0(c("The list is:", c(1,2,3), "hehe"))
paste(c("Gauss-Seidel algorithm failed to converge.
Check the initial values to exclude any division by zero
or other invalid operations. Problem occured in "), .id, c(" equations block.",
"If the problem persists,try a different method."), collapse= "")
paste(c("Gauss-Seidel algorithm failed to converge.
Check the initial values to exclude any division by zero
or other invalid operations. Problem occured in ", .id, " equations block.",
"If the problem persists,try a different method."), collapse= "")
paste(c("Gauss-Seidel algorithm failed to converge. \n
Check the initial values to exclude any division by zero
or other invalid operations. Problem occured in ", .id, " equations block.",
"If the problem persists,try a different method.")
paste(c("Gauss-Seidel algorithm failed to converge. <br>
Check the initial values to exclude any division by zero
or other invalid operations. Problem occured in ", .id, " equations block.",
"If the problem persists,try a different method."), collapse= "")
paste(c("Gauss-Seidel algorithm failed to converge.
Check the initial values to exclude any division by zero
or other invalid operations. Problem occured in ", .id, " equations block.",
"If the problem persists,try a different method."), collapse= "")
for (.i in 2:periods) {
for (.block in seq_along(blocks)) {
.id <- equations_id[[.block]]
# If 1 variable in the block, it is deterministic and no iteration is required.
if (length(.id) == 1) {
m[.i, .id] <- eval(exprs[[.id]])
#m[.i, block_names[[.block]]] <- 1
if(is.na(m[.i, .id])){
stop(message = paste('Gauss-Seidel algorithm failed.
During computation NaN was obtained in ', .id , ' equation ',
'Check if equations are correctly specified or change initial values.'))
}
}
# If cyclical block, use Gauss-Seidel algorithm
else {
for (.ite in 1:max_iter) {
for (.v in .id) {
m[.i, .v] <- suppressMessages(eval(exprs[[.v]]))
if(is.na(m[.i, .v])){
#  stop(message = paste('Gauss-Seidel algorithm failed.
# During computation NaN was obtained in ', .v , ' equation ',
# 'Check if equations are correctly specified or change initial values.'))
}
checks[[.v]] <- suppressMessages(abs(m[.i, .v] - holdouts[[.v]])/(holdouts[[.v]] + 1e-15))
}
#m[.i, block_names[[.block]]] <- .ite
if (any(!is.finite(checks[.id]) | is.na(checks[.id])))
stop(message = paste(c("Gauss-Seidel algorithm failed to converge. Check the initial values to exclude any division by zero or other invalid operations. Problem occured in ", .id, " equations block.", "If the problem persists,try a different method."), collapse= " "))
if (all(checks[.id] < tol)) {
break
} else {
for (.v in .id) {
holdouts[[.v]] <- m[.i, .v]
}
}
}
}
}
}
for (.i in 2:periods) {
for (.block in seq_along(blocks)) {
.id <- equations_id[[.block]]
# If 1 variable in the block, it is deterministic and no iteration is required.
if (length(.id) == 1) {
m[.i, .id] <- eval(exprs[[.id]])
#m[.i, block_names[[.block]]] <- 1
if(is.na(m[.i, .id])){
stop(message = paste('Gauss-Seidel algorithm failed.
During computation NaN was obtained in ', .id , ' equation ',
'Check if equations are correctly specified or change initial values.'))
}
}
# If cyclical block, use Gauss-Seidel algorithm
else {
for (.ite in 1:max_iter) {
for (.v in .id) {
m[.i, .v] <- suppressMessages(eval(exprs[[.v]]))
if(is.na(m[.i, .v])){
#  stop(message = paste('Gauss-Seidel algorithm failed.
# During computation NaN was obtained in ', .v , ' equation ',
# 'Check if equations are correctly specified or change initial values.'))
}
checks[[.v]] <- suppressMessages(abs(m[.i, .v] - holdouts[[.v]])/(holdouts[[.v]] + 1e-15))
}
#m[.i, block_names[[.block]]] <- .ite
if (any(!is.finite(checks[.id]) | is.na(checks[.id])))
stop(message = paste(c("Gauss-Seidel algorithm failed to converge. Check the initial values to exclude any division by zero or other invalid operations. Problem occured in '", .id, "' equations block.", "If the problem persists,try a different method."), collapse= " "))
if (all(checks[.id] < tol)) {
break
} else {
for (.v in .id) {
holdouts[[.v]] <- m[.i, .v]
}
}
}
}
}
}
devtools::load_all()
library(godley)
model_LP <- create_model(name = 'SFC LP testowy') %>%
add_variable(., 'Y', desc = '') %>%
add_variable(., 'YDr') %>%
add_variable(., 'TX') %>%
add_variable(., 'V', init = 0.0000001) %>%
add_variable(., 'CG') %>%
add_variable(., 'C') %>%
add_variable(., 'VE', init = 0.0000001) %>%
add_variable(., 'Hh') %>%
add_variable(., 'Hd') %>%
add_variable(., 'Bd') %>%
add_variable(., 'BLd') %>%
add_variable(., 'BLh', desc ='')%>%
add_variable(., 'Bs', desc ='')%>%
add_variable(., 'Hs', desc ='')%>%
add_variable(., 'Bcb', desc ='')%>%
add_variable(., 'BLs', desc ='')%>%
add_variable(., 'ERrbl', desc ='')%>%
add_variable(., 'rbl', desc ='',)%>%
add_variable(., 'CGE', desc ='')%>%
add_variable(., 'YDEr', desc ='')%>%
add_variable(., 'pebl', desc ='')%>%
add_variable(., 'Bh', desc ='')
model_OPEN3 <- create_model(name = 'SFC OPEN3') %>%
add_variable(., 'or_N', init = .00001)
model_OPEN3 <- model_OPEN3 %>%
add_variable(., 'xr', init = 1) %>%
add_variable(., 'pg_N', init = 1) %>%
add_variable(., 'r_N', init = 0.025) %>%
add_variable(., 'r_S', init = 0.025) %>%
add_variable(., 'G_S', init = 20) %>%
add_variable(., 'G_N', init = 20) %>%
add_variable(., 'mu_N', init = 0.15) %>%
add_variable(., 'mu_S', init = 0.15) %>%
add_variable(., 'alpha1_N', init = 0.7) %>%
add_variable(., 'alpha1_S', init = 0.8) %>%
add_variable(., 'alpha2_N', init = 0.3) %>%
add_variable(., 'alpha2_S', init = 0.2) %>%
add_variable(., 'lambda0_N', init = 0.67) %>%
add_variable(., 'lambda0_S', init = 0.67) %>%
add_variable(., 'lambda1_N', init = 0.05) %>%
add_variable(., 'lambda1_S', init = 0.05) %>%
add_variable(., 'lambda2_N', init = 0.01) %>%
add_variable(., 'lambda2_S', init = 0.01) %>%
add_variable(., 'theta_N', init = 0.2) %>%
add_variable(., 'theta_S', init = 0.2)%>%
add_variable(., 'phi_N', init = 0.005)%>%
add_variable(., 'phi_S', init = 0.005)
## equations
model_OPEN3 <- model_OPEN3 %>%
add_equation(., 'Y_N = C_N + G_N + X_N - IM_N') %>%
add_equation(., 'Y_S = C_S + G_S + X_S - IM_S') %>%
add_equation(., 'IM_N = mu_N * Y_N') %>%
add_equation(., 'IM_S = mu_S * Y_S') %>%
add_equation(., 'X_N = IM_S / xr') %>%
add_equation(., 'X_S = IM_N * xr') %>%
add_equation(., 'YD_N = Y_N - TX_N + r_N[-1] * Bh_N[-1]') %>%
add_equation(., 'YD_S = Y_S - TX_S + r_S[-1] * Bh_S[-1]') %>%
add_equation(., 'TX_N = theta_N * ( Y_N + r_N[-1] * Bh_N[-1])') %>%
add_equation(., 'TX_S = theta_S * ( Y_S + r_S[-1] * Bh_S[-1])') %>%
add_equation(., 'V_N = V_N[-1] + ( YD_N - C_N )') %>%
add_equation(., 'V_S = V_S[-1] + ( YD_S - C_S )') %>%
add_equation(., 'C_N = alpha1_N * YD_N + alpha2_N * V_N[-1]') %>%
add_equation(., 'C_S = alpha1_S * YD_S + alpha2_S * V_S[-1]') %>%
add_equation(., 'Hh_N = V_N - Bh_N') %>%
add_equation(., 'Hh_S = V_S - Bh_S') %>%
add_equation(., 'Bh_N = V_N * ( lambda0_N + lambda1_N * r_N - lambda2_N * ( YD_N/V_N ) )') %>%
add_equation(., 'Bh_S = V_S * ( lambda0_S + lambda1_S * r_S - lambda2_S * ( YD_S/V_S ) )') %>%
add_equation(., 'Bs_N = Bs_N[-1] + ( G_N + r_N[-1] * Bs_N[-1] ) - ( TX_N + r_N[-1] * Bcb_N[-1] )') %>%
add_equation(., 'Bs_S = Bs_S[-1] + ( G_S + r_S[-1] * Bs_S[-1] ) - ( TX_S + r_S[-1] * Bcb_S[-1] )') %>%
add_equation(., 'Bcb_N = Bs_N - Bh_N') %>%
add_equation(., 'Bcb_S = Bs_S - Bh_S') %>%
add_equation(., 'or_N = or_N[-1] + (( Hs_N - Hs_N[-1] - ( Bcb_N - Bcb_N[-1] ) )/pg_N)') %>%
add_equation(., 'or_S = or_S[-1] + (( Hs_S - Hs_S[-1] - ( Bcb_S - Bcb_S[-1] ) )/pg_S)') %>%
add_equation(., 'Hs_N = Hh_N') %>%
add_equation(., 'Hs_S = Hh_S') %>%
add_equation(., 'pg_S = pg_N * xr') %>%
add_equation(., 'deltaor_S = or_S - or_S[-1]') %>%
add_equation(., 'deltaor_N = - (or_N - or_N[-1])') %>%
add_equation(., 'deltaor_S = deltaor_N', hidden = TRUE) %>%
add_equation(., 'r_N = r_N[-1] - phi_N * ( ((or_N - or_N[-1])/or_N[-1]) * pg_N[-1] )') %>%
add_equation(., 'r_S = r_S[-1] - phi_S * ( ((or_S - or_S[-1])/or_S[-1]) * pg_S[-1] )')
model_OPEN3 <- prepare(model_OPEN3)
q
model_OPEN3 <- create_model(name = 'SFC OPEN3') %>%
add_variable(., 'or_N', init = .00001)
model_OPEN3 <- model_OPEN3 %>%
add_variable(., 'xr', init = 1) %>%
add_variable(., 'pg_N', init = 1) %>%
add_variable(., 'r_N', init = 0.025) %>%
add_variable(., 'r_S', init = 0.025) %>%
add_variable(., 'G_S', init = 20) %>%
add_variable(., 'G_N', init = 20) %>%
add_variable(., 'mu_N', init = 0.15) %>%
add_variable(., 'mu_S', init = 0.15) %>%
add_variable(., 'alpha1_N', init = 0.7) %>%
add_variable(., 'alpha1_S', init = 0.8) %>%
add_variable(., 'alpha2_N', init = 0.3) %>%
add_variable(., 'alpha2_S', init = 0.2) %>%
add_variable(., 'lambda0_N', init = 0.67) %>%
add_variable(., 'lambda0_S', init = 0.67) %>%
add_variable(., 'lambda1_N', init = 0.05) %>%
add_variable(., 'lambda1_S', init = 0.05) %>%
add_variable(., 'lambda2_N', init = 0.01) %>%
add_variable(., 'lambda2_S', init = 0.01) %>%
add_variable(., 'theta_N', init = 0.2) %>%
add_variable(., 'theta_S', init = 0.2)%>%
add_variable(., 'phi_N', init = 0.005)%>%
add_variable(., 'phi_S', init = 0.005)
## equations
model_OPEN3 <- model_OPEN3 %>%
add_equation(., 'Y_N = C_N + G_N + X_N - IM_N') %>%
add_equation(., 'Y_S = C_S + G_S + X_S - IM_S') %>%
add_equation(., 'IM_N = mu_N * Y_N') %>%
add_equation(., 'IM_S = mu_S * Y_S') %>%
add_equation(., 'X_N = IM_S / xr') %>%
add_equation(., 'X_S = IM_N * xr') %>%
add_equation(., 'YD_N = Y_N - TX_N + r_N[-1] * Bh_N[-1]') %>%
add_equation(., 'YD_S = Y_S - TX_S + r_S[-1] * Bh_S[-1]') %>%
add_equation(., 'TX_N = theta_N * ( Y_N + r_N[-1] * Bh_N[-1])') %>%
add_equation(., 'TX_S = theta_S * ( Y_S + r_S[-1] * Bh_S[-1])') %>%
add_equation(., 'V_N = V_N[-1] + ( YD_N - C_N )') %>%
add_equation(., 'V_S = V_S[-1] + ( YD_S - C_S )') %>%
add_equation(., 'C_N = alpha1_N * YD_N + alpha2_N * V_N[-1]') %>%
add_equation(., 'C_S = alpha1_S * YD_S + alpha2_S * V_S[-1]') %>%
add_equation(., 'Hh_N = V_N - Bh_N') %>%
add_equation(., 'Hh_S = V_S - Bh_S') %>%
add_equation(., 'Bh_N = V_N * ( lambda0_N + lambda1_N * r_N - lambda2_N * ( YD_N/V_N ) )') %>%
add_equation(., 'Bh_S = V_S * ( lambda0_S + lambda1_S * r_S - lambda2_S * ( YD_S/V_S ) )') %>%
add_equation(., 'Bs_N = Bs_N[-1] + ( G_N + r_N[-1] * Bs_N[-1] ) - ( TX_N + r_N[-1] * Bcb_N[-1] )') %>%
add_equation(., 'Bs_S = Bs_S[-1] + ( G_S + r_S[-1] * Bs_S[-1] ) - ( TX_S + r_S[-1] * Bcb_S[-1] )') %>%
add_equation(., 'Bcb_N = Bs_N - Bh_N') %>%
add_equation(., 'Bcb_S = Bs_S - Bh_S') %>%
add_equation(., 'or_N = or_N[-1] + (( Hs_N - Hs_N[-1] - ( Bcb_N - Bcb_N[-1] ) )/pg_N)') %>%
add_equation(., 'or_S = or_S[-1] + (( Hs_S - Hs_S[-1] - ( Bcb_S - Bcb_S[-1] ) )/pg_S)') %>%
add_equation(., 'Hs_N = Hh_N') %>%
add_equation(., 'Hs_S = Hh_S') %>%
add_equation(., 'pg_S = pg_N * xr') %>%
add_equation(., 'deltaor_S = or_S - or_S[-1]') %>%
add_equation(., 'deltaor_N = - (or_N - or_N[-1])') %>%
add_equation(., 'deltaor_S = deltaor_N', hidden = TRUE) %>%
add_equation(., 'r_N = r_N[-1] - phi_N * ( ((or_N - or_N[-1])/or_N[-1]) * pg_N[-1] )') %>%
add_equation(., 'r_S = r_S[-1] - phi_S * ( ((or_S - or_S[-1])/or_S[-1]) * pg_S[-1] )')
model_OPEN3 <- prepare(model_OPEN3)
devtools::install()
library("godley")
model_OPEN3 <- create_model(name = 'SFC OPEN3') %>%
add_variable(., 'or_N', init = .00001)
library("godley")
devtools::install()
gc()
devtools::install()
